There are 44 Message Chains in project d264
Following are the Message Chains and their respective refactoring suggestion:

----------------------------------
1. OurMessageChain{ providerUrl.removeParameters(getFilteredKeys(providerUrl)).removeParameter(Constants.MONITOR_KEY).removeParameter(Constants.BIND_IP_KEY).removeParameter(Constants.BIND_PORT_KEY).removeParameter(QOS_ENABLE).removeParameter(QOS_PORT).removeParameter(ACCEPT_FOREIGN_IP).removeParameter(VALIDATION_KEY), degree= 8, category= HIGH, containerMethod= getRegisteredProviderUrl(), containerClass= RegistryProtocol}
-----

public class RegistryProtocol{
...
	private URL getRegisteredProviderUrl(final Invoker<?> originInvoker){
	...
		... providerUrl.removeParametersRemoveParameterRemoveParameterRemoveParameterRemoveParameterRemoveParameterRemoveParameterRemoveParameter();
	...
	}
...
}

public class URL{
...
	public URL removeParametersRemoveParameterRemoveParameterRemoveParameterRemoveParameterRemoveParameterRemoveParameterRemoveParameter(){
	...
		... removeParameters(getFilteredKeys(providerUrl)).removeParameterRemoveParameterRemoveParameterRemoveParameterRemoveParameterRemoveParameterRemoveParameter();
	...
	}
...
}

public class URL{
...
	public URL removeParameterRemoveParameterRemoveParameterRemoveParameterRemoveParameterRemoveParameterRemoveParameter(){
	...
		... removeParameter(Constants.MONITOR_KEY).removeParameterRemoveParameterRemoveParameterRemoveParameterRemoveParameterRemoveParameter();
	...
	}
...
}

public class URL{
...
	public URL removeParameterRemoveParameterRemoveParameterRemoveParameterRemoveParameterRemoveParameter(){
	...
		... removeParameter(Constants.BIND_IP_KEY).removeParameterRemoveParameterRemoveParameterRemoveParameterRemoveParameter();
	...
	}
...
}

public class URL{
...
	public URL removeParameterRemoveParameterRemoveParameterRemoveParameterRemoveParameter(){
	...
		... removeParameter(Constants.BIND_PORT_KEY).removeParameterRemoveParameterRemoveParameterRemoveParameter();
	...
	}
...
}

public class URL{
...
	public URL removeParameterRemoveParameterRemoveParameterRemoveParameter(){
	...
		... removeParameter(QOS_ENABLE).removeParameterRemoveParameterRemoveParameter();
	...
	}
...
}

public class URL{
...
	public URL removeParameterRemoveParameterRemoveParameter(){
	...
		... removeParameter(QOS_PORT).removeParameterRemoveParameter();
	...
	}
...
}

public class URL{
...
	public URL removeParameterRemoveParameter(){
	...
		... removeParameter(ACCEPT_FOREIGN_IP).removeParameter();
	...
	}
...
}


----------------------------------
2. OurMessageChain{ url.addParameter(Constants.LAZY_CONNECT_INITIAL_STATE_KEY, Boolean.FALSE).addParameter(Constants.RECONNECT_KEY, Boolean.FALSE).addParameter(Constants.SEND_RECONNECT_KEY, Boolean.TRUE.toString()).addParameter("warning", Boolean.TRUE.toString()).addParameter(LazyConnectExchangeClient.REQUEST_WITH_WARNING_KEY, true).addParameter("_client_memo", "referencecounthandler.replacewithlazyclient"), degree= 6, category= MEDIUM, containerMethod= replaceWithLazyClient(), containerClass= ReferenceCountExchangeClient}
-----

public class ReferenceCountExchangeClient{
...
	private LazyConnectExchangeClient replaceWithLazyClient(){
	...
		... url.addParameterAddParameterAddParameterAddParameterAddParameterAddParameter();
	...
	}
...
}

public class URL{
...
	public URL addParameterAddParameterAddParameterAddParameterAddParameterAddParameter(){
	...
		... addParameter(Constants.LAZY_CONNECT_INITIAL_STATE_KEY, Boolean.FALSE).addParameterAddParameterAddParameterAddParameterAddParameter();
	...
	}
...
}

public class URL{
...
	public URL addParameterAddParameterAddParameterAddParameterAddParameter(){
	...
		... addParameter(Constants.RECONNECT_KEY, Boolean.FALSE).addParameterAddParameterAddParameterAddParameter();
	...
	}
...
}

public class URL{
...
	public URL addParameterAddParameterAddParameterAddParameter(){
	...
		... addParameter(Constants.SEND_RECONNECT_KEY, Boolean.TRUE.toString()).addParameterAddParameterAddParameter();
	...
	}
...
}

public class URL{
...
	public URL addParameterAddParameterAddParameter(){
	...
		... addParameter("warning", Boolean.TRUE.toString()).addParameterAddParameter();
	...
	}
...
}

public class URL{
...
	public URL addParameterAddParameter(){
	...
		... addParameter(LazyConnectExchangeClient.REQUEST_WITH_WARNING_KEY, true).addParameter();
	...
	}
...
}


----------------------------------
3. OurMessageChain{ consumerInvokerWrapper.getRegistryDirectory().getUrlInvokerMap().size(), degree= 3, category= LOW, containerMethod= getConsumerAddressNum(), containerClass= Ls}
-----

public class Ls{
...
	private int getConsumerAddressNum(String serviceUniqueName){
	...
		... consumerInvokerWrapper.registryDirectoryUrlInvokerMapSize();
	...
	}
...
}

public class ConsumerInvokerWrapper{
...
	public void registryDirectoryUrlInvokerMapSize(){
	...
		... getRegistryDirectory().urlInvokerMapSize();
	...
	}
...
}

public class RegistryDirectory{
...
	public void urlInvokerMapSize(){
	...
		... getUrlInvokerMap().size();
	...
	}
...
}


----------------------------------
4. OurMessageChain{ configuratorUrl.getParameters().entrySet(), degree= 2, category= LOW, containerMethod= configureIfMatch(), containerClass= AbstractConfigurator}
-----

public class AbstractConfigurator{
...
	private URL configureIfMatch(String host, URL url){
	...
		... configuratorUrl.parametersEntrySet();
	...
	}
...
}

public class URL{
...
	public void parametersEntrySet(){
	...
		... getParameters().entrySet();
	...
	}
...
}


----------------------------------
5. OurMessageChain{ router.getUrl().getParameter(Constants.RUNTIME_KEY, false), degree= 2, category= LOW, containerMethod= list(), containerClass= AbstractDirectory}
-----

public class AbstractDirectory{
...
	public List<Invoker<T>> list(Invocation invocation) throws RpcException{
	...
		... router.urlParameter();
	...
	}
...
}

public class Router{
...
	public String urlParameter(){
	...
		... getUrl().getParameter();
	...
	}
...
}


----------------------------------
6. OurMessageChain{ url.toFullString().compareTo(c.url.toFullString()), degree= 2, category= LOW, containerMethod= compareTo(), containerClass= ConditionRouter}
-----

public class ConditionRouter{
...
	public int compareTo(Router o){
	...
		... url.toFullStringCompareTo();
	...
	}
...
}

public class URL{
...
	public void toFullStringCompareTo(){
	...
		... toFullString().compareTo();
	...
	}
...
}


----------------------------------
7. OurMessageChain{ log.getLogLevel().equals(expectedLevel), degree= 2, category= LOW, containerMethod= findLevelWithThreadName(), containerClass= LogUtil}
-----

public class LogUtil{
...
	public static int findLevelWithThreadName(Level expectedLevel, String threadName){
	...
		... log.logLevelEquals();
	...
	}
...
}

public class Log{
...
	public void logLevelEquals(){
	...
		... getLogLevel().equals();
	...
	}
...
}


----------------------------------
8. OurMessageChain{ log.getLogThread().equals(threadName), degree= 2, category= LOW, containerMethod= findLevelWithThreadName(), containerClass= LogUtil}
-----

public class LogUtil{
...
	public static int findLevelWithThreadName(Level expectedLevel, String threadName){
	...
		... log.logThreadEquals();
	...
	}
...
}

public class Log{
...
	public void logThreadEquals(){
	...
		... getLogThread().equals();
	...
	}
...
}


----------------------------------
9. OurMessageChain{ u.setHost(NetUtils.getLocalHost()).toFullString(), degree= 2, category= LOW, containerMethod= filterLocalHost(), containerClass= NetUtils}
-----

public class NetUtils{
...
	public static String filterLocalHost(String host){
	...
		... u.setHostToFullString();
	...
	}
...
}

public class URL{
...
	public String setHostToFullString(){
	...
		... setHost(NetUtils.getLocalHost()).toFullString();
	...
	}
...
}


----------------------------------
10. OurMessageChain{ metadata.getInterfaceClass().getMethods(), degree= 2, category= LOW, containerMethod= initMethod(), containerClass= ProviderModel}
-----

public class ProviderModel{
...
	private void initMethod(){
	...
		... metadata.interfaceClassMethods();
	...
	}
...
}

public class ServiceConfig{
...
	public void interfaceClassMethods(){
	...
		... getInterfaceClass().getMethods();
	...
	}
...
}


----------------------------------
11. OurMessageChain{ url.getPath().length(), degree= 2, category= LOW, containerMethod= createProxy(), containerClass= ReferenceConfig}
-----

public class ReferenceConfig{
...
	private T createProxy(Map<String, String> map){
	...
		... url.pathLength();
	...
	}
...
}

public class URL{
...
	public void pathLength(){
	...
		... getPath().length();
	...
	}
...
}


----------------------------------
12. OurMessageChain{ argument.getType().length(), degree= 2, category= LOW, containerMethod= doExportUrlsFor1Protocol(), containerClass= ServiceConfig}
-----

public class ServiceConfig{
...
	private void doExportUrlsFor1Protocol(ProtocolConfig protocolConfig, List<URL> registryURLs){
	...
		... argument.typeLength();
	...
	}
...
}

public class ArgumentConfig{
...
	public void typeLength(){
	...
		... getType().length();
	...
	}
...
}


----------------------------------
13. OurMessageChain{ config.isDefault().booleanValue(), degree= 2, category= LOW, containerMethod= afterPropertiesSet(), containerClass= ReferenceBean}
-----

public class ReferenceBean{
...
	public void afterPropertiesSet() throws Exception{
	...
		... config.isDefaultBooleanValue();
	...
	}
...
}

public class ConsumerConfig{
...
	public void isDefaultBooleanValue(){
	...
		... isDefault().booleanValue();
	...
	}
...
}


----------------------------------
14. OurMessageChain{ config.isDefault().booleanValue(), degree= 2, category= LOW, containerMethod= afterPropertiesSet(), containerClass= ReferenceBean}
-----

public class ReferenceBean{
...
	public void afterPropertiesSet() throws Exception{
	...
		... config.isDefaultBooleanValue();
	...
	}
...
}

public class ConsumerConfig{
...
	public void isDefaultBooleanValue(){
	...
		... isDefault().booleanValue();
	...
	}
...
}


----------------------------------
15. OurMessageChain{ config.isDefault().booleanValue(), degree= 2, category= LOW, containerMethod= afterPropertiesSet(), containerClass= ReferenceBean}
-----

public class ReferenceBean{
...
	public void afterPropertiesSet() throws Exception{
	...
		... config.isDefaultBooleanValue();
	...
	}
...
}

public class ConsumerConfig{
...
	public void isDefaultBooleanValue(){
	...
		... isDefault().booleanValue();
	...
	}
...
}


----------------------------------
16. OurMessageChain{ config.isDefault().booleanValue(), degree= 2, category= LOW, containerMethod= afterPropertiesSet(), containerClass= ReferenceBean}
-----

public class ReferenceBean{
...
	public void afterPropertiesSet() throws Exception{
	...
		... config.isDefaultBooleanValue();
	...
	}
...
}

public class ConsumerConfig{
...
	public void isDefaultBooleanValue(){
	...
		... isDefault().booleanValue();
	...
	}
...
}


----------------------------------
17. OurMessageChain{ config.isDefault().booleanValue(), degree= 2, category= LOW, containerMethod= afterPropertiesSet(), containerClass= ReferenceBean}
-----

public class ReferenceBean{
...
	public void afterPropertiesSet() throws Exception{
	...
		... config.isDefaultBooleanValue();
	...
	}
...
}

public class ConsumerConfig{
...
	public void isDefaultBooleanValue(){
	...
		... isDefault().booleanValue();
	...
	}
...
}


----------------------------------
18. OurMessageChain{ config.isDefault().booleanValue(), degree= 2, category= LOW, containerMethod= afterPropertiesSet(), containerClass= ServiceBean}
-----

public class ServiceBean{
...
	public void afterPropertiesSet() throws Exception{
	...
		... config.isDefaultBooleanValue();
	...
	}
...
}

public class ProviderConfig{
...
	public void isDefaultBooleanValue(){
	...
		... isDefault().booleanValue();
	...
	}
...
}


----------------------------------
19. OurMessageChain{ config.isDefault().booleanValue(), degree= 2, category= LOW, containerMethod= afterPropertiesSet(), containerClass= ServiceBean}
-----

public class ServiceBean{
...
	public void afterPropertiesSet() throws Exception{
	...
		... config.isDefaultBooleanValue();
	...
	}
...
}

public class ProviderConfig{
...
	public void isDefaultBooleanValue(){
	...
		... isDefault().booleanValue();
	...
	}
...
}


----------------------------------
20. OurMessageChain{ config.isDefault().booleanValue(), degree= 2, category= LOW, containerMethod= afterPropertiesSet(), containerClass= ServiceBean}
-----

public class ServiceBean{
...
	public void afterPropertiesSet() throws Exception{
	...
		... config.isDefaultBooleanValue();
	...
	}
...
}

public class ProviderConfig{
...
	public void isDefaultBooleanValue(){
	...
		... isDefault().booleanValue();
	...
	}
...
}


----------------------------------
21. OurMessageChain{ config.isDefault().booleanValue(), degree= 2, category= LOW, containerMethod= afterPropertiesSet(), containerClass= ServiceBean}
-----

public class ServiceBean{
...
	public void afterPropertiesSet() throws Exception{
	...
		... config.isDefaultBooleanValue();
	...
	}
...
}

public class ProviderConfig{
...
	public void isDefaultBooleanValue(){
	...
		... isDefault().booleanValue();
	...
	}
...
}


----------------------------------
22. OurMessageChain{ config.isDefault().booleanValue(), degree= 2, category= LOW, containerMethod= afterPropertiesSet(), containerClass= ServiceBean}
-----

public class ServiceBean{
...
	public void afterPropertiesSet() throws Exception{
	...
		... config.isDefaultBooleanValue();
	...
	}
...
}

public class ProviderConfig{
...
	public void isDefaultBooleanValue(){
	...
		... isDefault().booleanValue();
	...
	}
...
}


----------------------------------
23. OurMessageChain{ config.isDefault().booleanValue(), degree= 2, category= LOW, containerMethod= afterPropertiesSet(), containerClass= ServiceBean}
-----

public class ServiceBean{
...
	public void afterPropertiesSet() throws Exception{
	...
		... config.isDefaultBooleanValue();
	...
	}
...
}

public class ProviderConfig{
...
	public void isDefaultBooleanValue(){
	...
		... isDefault().booleanValue();
	...
	}
...
}


----------------------------------
24. OurMessageChain{ config.isDefault().booleanValue(), degree= 2, category= LOW, containerMethod= afterPropertiesSet(), containerClass= ServiceBean}
-----

public class ServiceBean{
...
	public void afterPropertiesSet() throws Exception{
	...
		... config.isDefaultBooleanValue();
	...
	}
...
}

public class ProviderConfig{
...
	public void isDefaultBooleanValue(){
	...
		... isDefault().booleanValue();
	...
	}
...
}


----------------------------------
25. OurMessageChain{ url.setPath(MonitorService.class.getName()).addParameter(Constants.INTERFACE_KEY, MonitorService.class.getName()), degree= 2, category= LOW, containerMethod= getMonitor(), containerClass= AbstractMonitorFactory}
-----

public class AbstractMonitorFactory{
...
	public Monitor getMonitor(URL url){
	...
		... url.setPathAddParameter();
	...
	}
...
}

public class URL{
...
	public URL setPathAddParameter(){
	...
		... setPath(MonitorService.class.getName()).addParameter();
	...
	}
...
}


----------------------------------
26. OurMessageChain{ statistics.getUrl().addParameters(MonitorService.TIMESTAMP, timestamp, MonitorService.SUCCESS, String.valueOf(success), MonitorService.FAILURE, String.valueOf(failure), MonitorService.INPUT, String.valueOf(input), MonitorService.OUTPUT, String.valueOf(output), MonitorService.ELAPSED, String.valueOf(elapsed), MonitorService.CONCURRENT, String.valueOf(concurrent), MonitorService.MAX_INPUT, String.valueOf(maxInput), MonitorService.MAX_OUTPUT, String.valueOf(maxOutput), MonitorService.MAX_ELAPSED, String.valueOf(maxElapsed), MonitorService.MAX_CONCURRENT, String.valueOf(maxConcurrent), Constants.DEFAULT_PROTOCOL, version), degree= 2, category= LOW, containerMethod= send(), containerClass= DubboMonitor}
-----

public class DubboMonitor{
...
	public void send(){
	...
		... statistics.urlAddParameters();
	...
	}
...
}

public class Statistics{
...
	public URL urlAddParameters(){
	...
		... getUrl().addParameters();
	...
	}
...
}


----------------------------------
27. OurMessageChain{ tTable.padding(1).rendering(), degree= 2, category= LOW, containerMethod= commandHelp(), containerClass= Help}
-----

public class Help{
...
	private String commandHelp(String commandName){
	...
		... tTable.paddingRendering();
	...
	}
...
}

public class TTable{
...
	public String paddingRendering(){
	...
		... padding(1).rendering();
	...
	}
...
}


----------------------------------
28. OurMessageChain{ tTable.padding(1).rendering(), degree= 2, category= LOW, containerMethod= mainHelp(), containerClass= Help}
-----

public class Help{
...
	private String mainHelp(){
	...
		... tTable.paddingRendering();
	...
	}
...
}

public class TTable{
...
	public String paddingRendering(){
	...
		... padding(1).rendering();
	...
	}
...
}


----------------------------------
29. OurMessageChain{ consumerInvokerWrapper.getRegistryDirectory().getUrlInvokerMap(), degree= 2, category= LOW, containerMethod= getConsumerAddressNum(), containerClass= Ls}
-----

public class Ls{
...
	private int getConsumerAddressNum(String serviceUniqueName){
	...
		... consumerInvokerWrapper.registryDirectoryUrlInvokerMap();
	...
	}
...
}

public class ConsumerInvokerWrapper{
...
	public Map<String,Invoker<T>> registryDirectoryUrlInvokerMap(){
	...
		... getRegistryDirectory().getUrlInvokerMap();
	...
	}
...
}


----------------------------------
30. OurMessageChain{ providerModel.getServiceName().matches(servicePattern), degree= 2, category= LOW, containerMethod= execute(), containerClass= Offline}
-----

public class Offline{
...
	public String execute(CommandContext commandContext, String[] args){
	...
		... providerModel.serviceNameMatches();
	...
	}
...
}

public class ProviderModel{
...
	public void serviceNameMatches(){
	...
		... getServiceName().matches();
	...
	}
...
}


----------------------------------
31. OurMessageChain{ providerModel.getServiceName().matches(servicePattern), degree= 2, category= LOW, containerMethod= execute(), containerClass= Online}
-----

public class Online{
...
	public String execute(CommandContext commandContext, String[] args){
	...
		... providerModel.serviceNameMatches();
	...
	}
...
}

public class ProviderModel{
...
	public void serviceNameMatches(){
	...
		... getServiceName().matches();
	...
	}
...
}


----------------------------------
32. OurMessageChain{ providerUrl.getProtocol().equals(acceptProtocol), degree= 2, category= LOW, containerMethod= toInvokers(), containerClass= RegistryDirectory}
-----

public class RegistryDirectory{
...
	private Map<String, Invoker<T>> toInvokers(List<URL> urls){
	...
		... providerUrl.protocolEquals();
	...
	}
...
}

public class URL{
...
	public void protocolEquals(){
	...
		... getProtocol().equals();
	...
	}
...
}


----------------------------------
33. OurMessageChain{ providerUrl.getPath().length(), degree= 2, category= LOW, containerMethod= mergeUrl(), containerClass= RegistryDirectory}
-----

public class RegistryDirectory{
...
	private URL mergeUrl(URL providerUrl){
	...
		... providerUrl.pathLength();
	...
	}
...
}

public class URL{
...
	public void pathLength(){
	...
		... getPath().length();
	...
	}
...
}


----------------------------------
34. OurMessageChain{ registryUrl.setProtocol(protocol).removeParameter(Constants.REGISTRY_KEY), degree= 2, category= LOW, containerMethod= getRegistryUrl(), containerClass= RegistryProtocol}
-----

public class RegistryProtocol{
...
	private URL getRegistryUrl(Invoker<?> originInvoker){
	...
		... registryUrl.setProtocolRemoveParameter();
	...
	}
...
}

public class URL{
...
	public URL setProtocolRemoveParameter(){
	...
		... setProtocol(protocol).removeParameter();
	...
	}
...
}


----------------------------------
35. OurMessageChain{ providerUrl.removeParameters("dynamic", "enabled").toFullString(), degree= 2, category= LOW, containerMethod= getCacheKey(), containerClass= RegistryProtocol}
-----

public class RegistryProtocol{
...
	private String getCacheKey(final Invoker<?> originInvoker){
	...
		... providerUrl.removeParametersToFullString();
	...
	}
...
}

public class URL{
...
	public String removeParametersToFullString(){
	...
		... removeParameters("dynamic", "enabled").toFullString();
	...
	}
...
}


----------------------------------
36. OurMessageChain{ url.getIp().equals(host), degree= 2, category= LOW, containerMethod= getExchangeChannel(), containerClass= ExchangeServerPeer}
-----

public class ExchangeServerPeer{
...
	public ExchangeChannel getExchangeChannel(InetSocketAddress remoteAddress){
	...
		... url.ipEquals();
	...
	}
...
}

public class URL{
...
	public void ipEquals(){
	...
		... getIp().equals();
	...
	}
...
}


----------------------------------
37. OurMessageChain{ url.getIp().equals(host), degree= 2, category= LOW, containerMethod= getChannel(), containerClass= ServerPeer}
-----

public class ServerPeer{
...
	public Channel getChannel(InetSocketAddress remoteAddress){
	...
		... url.ipEquals();
	...
	}
...
}

public class URL{
...
	public void ipEquals(){
	...
		... getIp().equals();
	...
	}
...
}


----------------------------------
38. OurMessageChain{ referurl.addParametersIfAbsent(url.getParameters()).removeParameter(Constants.METHODS_KEY), degree= 2, category= LOW, containerMethod= referOrdestroyCallbackService(), containerClass= CallbackServiceCodec}
-----

public class CallbackServiceCodec{
...
	private static Object referOrdestroyCallbackService(Channel channel, URL url, Class<?> clazz, Invocation inv, int instid, boolean isRefer){
	...
		... referurl.addParametersIfAbsentRemoveParameter();
	...
	}
...
}

public class URL{
...
	public URL addParametersIfAbsentRemoveParameter(){
	...
		... addParametersIfAbsent(url.getParameters()).removeParameter();
	...
	}
...
}


----------------------------------
39. OurMessageChain{ result.getAttachments().put(Constants.DUBBO_VERSION_KEY, Version.getProtocolVersion()), degree= 2, category= LOW, containerMethod= encodeResponseData(), containerClass= DubboCodec}
-----

public class DubboCodec{
...
	protected void encodeResponseData(Channel channel, ObjectOutput out, Object data, String version) throws IOException{
	...
		... result.attachmentsPut();
	...
	}
...
}

public class Result{
...
	public void attachmentsPut(){
	...
		... getAttachments().put();
	...
	}
...
}


----------------------------------
40. OurMessageChain{ inv.getMethodName().equals(method), degree= 2, category= LOW, containerMethod= reply(), containerClass= DubboProtocol}
-----

public class DubboProtocol{
...
	public Object reply(ExchangeChannel channel, Object message) throws RemotingException{
	...
		... inv.methodNameEquals();
	...
	}
...
}

public class Invocation{
...
	public void methodNameEquals(){
	...
		... getMethodName().equals();
	...
	}
...
}


----------------------------------
41. OurMessageChain{ inv.getMethodName().equals(methodsStr), degree= 2, category= LOW, containerMethod= reply(), containerClass= DubboProtocol}
-----

public class DubboProtocol{
...
	public Object reply(ExchangeChannel channel, Object message) throws RemotingException{
	...
		... inv.methodNameEquals();
	...
	}
...
}

public class Invocation{
...
	public void methodNameEquals(){
	...
		... getMethodName().equals();
	...
	}
...
}


----------------------------------
42. OurMessageChain{ context.getAttachments().keySet(), degree= 2, category= LOW, containerMethod= open(), containerClass= DubboHessianURLConnectionFactory}
-----

public class DubboHessianURLConnectionFactory{
...
	public HessianConnection open(URL url) throws IOException{
	...
		... context.attachmentsKeySet();
	...
	}
...
}

public class RpcContext{
...
	public void attachmentsKeySet(){
	...
		... getAttachments().keySet();
	...
	}
...
}


----------------------------------
43. OurMessageChain{ context.getAttachments().keySet(), degree= 2, category= LOW, containerMethod= open(), containerClass= HttpClientConnectionFactory}
-----

public class HttpClientConnectionFactory{
...
	public HessianConnection open(URL url) throws IOException{
	...
		... context.attachmentsKeySet();
	...
	}
...
}

public class RpcContext{
...
	public void attachmentsKeySet(){
	...
		... getAttachments().keySet();
	...
	}
...
}


----------------------------------
44. OurMessageChain{ inv.getAttachments().get(Constants.INTERFACE_KEY), degree= 2, category= LOW, containerMethod= reply(), containerClass= ThriftProtocol}
-----

public class ThriftProtocol{
...
	public Object reply(ExchangeChannel channel, Object msg) throws RemotingException{
	...
		... inv.attachments();
	...
	}
...
}

public class Invocation{
...
	public void attachments(){
	...
		... getAttachments().get();
	...
	}
...
}

