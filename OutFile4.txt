There are 45 Message Chains in project d2411
Following are the Message Chains and their respective refactoring suggestion:

----------------------------------
1. OurMessageChain{ url.addParameter(Constants.LAZY_CONNECT_INITIAL_STATE_KEY, Boolean.FALSE).addParameter(Constants.RECONNECT_KEY, Boolean.FALSE).addParameter(Constants.SEND_RECONNECT_KEY, Boolean.TRUE.toString()).addParameter("warning", Boolean.TRUE.toString()).addParameter(LazyConnectExchangeClient.REQUEST_WITH_WARNING_KEY, true).addParameter("_client_memo", "referencecounthandler.replacewithlazyclient"), degree= 6, category= HIGH, containerMethod= replaceWithLazyClient(), containerClass= ReferenceCountExchangeClient}
-----

public class ReferenceCountExchangeClient{
...
	private LazyConnectExchangeClient replaceWithLazyClient(){
	...
		... url.addParameterAddParameterAddParameterAddParameterAddParameterAddParameter();
	...
	}
...
}

public class URL{
...
	public URL addParameterAddParameterAddParameterAddParameterAddParameterAddParameter(){
	...
		... addParameter(Constants.LAZY_CONNECT_INITIAL_STATE_KEY, Boolean.FALSE).addParameterAddParameterAddParameterAddParameterAddParameter();
	...
	}
...
}

public class URL{
...
	public URL addParameterAddParameterAddParameterAddParameterAddParameter(){
	...
		... addParameter(Constants.RECONNECT_KEY, Boolean.FALSE).addParameterAddParameterAddParameterAddParameter();
	...
	}
...
}

public class URL{
...
	public URL addParameterAddParameterAddParameterAddParameter(){
	...
		... addParameter(Constants.SEND_RECONNECT_KEY, Boolean.TRUE.toString()).addParameterAddParameterAddParameter();
	...
	}
...
}

public class URL{
...
	public URL addParameterAddParameterAddParameter(){
	...
		... addParameter("warning", Boolean.TRUE.toString()).addParameterAddParameter();
	...
	}
...
}

public class URL{
...
	public URL addParameterAddParameter(){
	...
		... addParameter(LazyConnectExchangeClient.REQUEST_WITH_WARNING_KEY, true).addParameter();
	...
	}
...
}


----------------------------------
2. OurMessageChain{ page.getRows().get(0).size(), degree= 3, category= MEDIUM, containerMethod= doPost(), containerClass= PageServlet}
-----

public class PageServlet{
...
	protected final void doPost(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException{
	...
		... page.rowsSize();
	...
	}
...
}


----------------------------------
3. OurMessageChain{ user.getUsername().length(), degree= 2, category= LOW, containerMethod= invoke(), containerClass= AuthorizationValve}
-----

public class AuthorizationValve{
...
	public void invoke(PipelineContext pipelineContext) throws Exception{
	...
		... user.usernameLength();
	...
	}
...
}

public class User{
...
	public void usernameLength(){
	...
		... getUsername().length();
	...
	}
...
}


----------------------------------
4. OurMessageChain{ route.getService().isEmpty(), degree= 2, category= LOW, containerMethod= show(), containerClass= Routes}
-----

public class Routes{
...
	public void show(Map<String, Object> context){
	...
		... route.serviceIsEmpty();
	...
	}
...
}

public class Route{
...
	public void serviceIsEmpty(){
	...
		... getService().isEmpty();
	...
	}
...
}


----------------------------------
5. OurMessageChain{ routeRule.getThenCondition().isEmpty(), degree= 2, category= LOW, containerMethod= create(), containerClass= Routes}
-----

public class Routes{
...
	public boolean create(Map<String, Object> context){
	...
		... routeRule.thenConditionIsEmpty();
	...
	}
...
}

public class RouteRule{
...
	public void thenConditionIsEmpty(){
	...
		... getThenCondition().isEmpty();
	...
	}
...
}


----------------------------------
6. OurMessageChain{ routeRule.getThenCondition().get("black"), degree= 2, category= LOW, containerMethod= update(), containerClass= Routes}
-----

public class Routes{
...
	public boolean update(Map<String, Object> context){
	...
		... routeRule.thenCondition();
	...
	}
...
}

public class RouteRule{
...
	public void thenCondition(){
	...
		... getThenCondition().get();
	...
	}
...
}


----------------------------------
7. OurMessageChain{ result.getThenCondition().isEmpty(), degree= 2, category= LOW, containerMethod= update(), containerClass= Routes}
-----

public class Routes{
...
	public boolean update(Map<String, Object> context){
	...
		... result.thenConditionIsEmpty();
	...
	}
...
}

public class RouteRule{
...
	public void thenConditionIsEmpty(){
	...
		... getThenCondition().isEmpty();
	...
	}
...
}


----------------------------------
8. OurMessageChain{ configuratorUrl.getParameters().entrySet(), degree= 2, category= LOW, containerMethod= configure(), containerClass= AbstractConfigurator}
-----

public class AbstractConfigurator{
...
	public URL configure(URL url){
	...
		... configuratorUrl.parametersEntrySet();
	...
	}
...
}

public class URL{
...
	public void parametersEntrySet(){
	...
		... getParameters().entrySet();
	...
	}
...
}


----------------------------------
9. OurMessageChain{ router.getUrl().getParameter(Constants.RUNTIME_KEY, true), degree= 2, category= LOW, containerMethod= list(), containerClass= AbstractDirectory}
-----

public class AbstractDirectory{
...
	public List<Invoker<T>> list(Invocation invocation) throws RpcException{
	...
		... router.urlParameter();
	...
	}
...
}

public class Router{
...
	public String urlParameter(){
	...
		... getUrl().getParameter();
	...
	}
...
}


----------------------------------
10. OurMessageChain{ url.toFullString().compareTo(c.url.toFullString()), degree= 2, category= LOW, containerMethod= compareTo(), containerClass= ConditionRouter}
-----

public class ConditionRouter{
...
	public int compareTo(Router o){
	...
		... url.toFullStringCompareTo();
	...
	}
...
}

public class URL{
...
	public void toFullStringCompareTo(){
	...
		... toFullString().compareTo();
	...
	}
...
}


----------------------------------
11. OurMessageChain{ log.getLogLevel().equals(expectedLevel), degree= 2, category= LOW, containerMethod= findLevelWithThreadName(), containerClass= LogUtil}
-----

public class LogUtil{
...
	public static int findLevelWithThreadName(Level expectedLevel, String threadName){
	...
		... log.logLevelEquals();
	...
	}
...
}

public class Log{
...
	public void logLevelEquals(){
	...
		... getLogLevel().equals();
	...
	}
...
}


----------------------------------
12. OurMessageChain{ log.getLogThread().equals(threadName), degree= 2, category= LOW, containerMethod= findLevelWithThreadName(), containerClass= LogUtil}
-----

public class LogUtil{
...
	public static int findLevelWithThreadName(Level expectedLevel, String threadName){
	...
		... log.logThreadEquals();
	...
	}
...
}

public class Log{
...
	public void logThreadEquals(){
	...
		... getLogThread().equals();
	...
	}
...
}


----------------------------------
13. OurMessageChain{ u.setHost(NetUtils.getLocalHost()).toFullString(), degree= 2, category= LOW, containerMethod= filterLocalHost(), containerClass= NetUtils}
-----

public class NetUtils{
...
	public static String filterLocalHost(String host){
	...
		... u.setHostToFullString();
	...
	}
...
}

public class URL{
...
	public String setHostToFullString(){
	...
		... setHost(NetUtils.getLocalHost()).toFullString();
	...
	}
...
}


----------------------------------
14. OurMessageChain{ url.getPath().length(), degree= 2, category= LOW, containerMethod= createProxy(), containerClass= ReferenceConfig}
-----

public class ReferenceConfig{
...
	private T createProxy(){
	...
		... url.pathLength();
	...
	}
...
}

public class URL{
...
	public void pathLength(){
	...
		... getPath().length();
	...
	}
...
}


----------------------------------
15. OurMessageChain{ argument.getType().length(), degree= 2, category= LOW, containerMethod= doExportUrlsFor1Protocol(), containerClass= ServiceConfig}
-----

public class ServiceConfig{
...
	private void doExportUrlsFor1Protocol(ProtocolConfig protocolConfig, List<URL> registryURLs){
	...
		... argument.typeLength();
	...
	}
...
}

public class ArgumentConfig{
...
	public void typeLength(){
	...
		... getType().length();
	...
	}
...
}


----------------------------------
16. OurMessageChain{ config.isDefault().booleanValue(), degree= 2, category= LOW, containerMethod= afterPropertiesSet(), containerClass= ReferenceBean}
-----

public class ReferenceBean{
...
	public void afterPropertiesSet() throws Exception{
	...
		... config.isDefaultBooleanValue();
	...
	}
...
}

public class ConsumerConfig{
...
	public void isDefaultBooleanValue(){
	...
		... isDefault().booleanValue();
	...
	}
...
}


----------------------------------
17. OurMessageChain{ config.isDefault().booleanValue(), degree= 2, category= LOW, containerMethod= afterPropertiesSet(), containerClass= ReferenceBean}
-----

public class ReferenceBean{
...
	public void afterPropertiesSet() throws Exception{
	...
		... config.isDefaultBooleanValue();
	...
	}
...
}

public class ConsumerConfig{
...
	public void isDefaultBooleanValue(){
	...
		... isDefault().booleanValue();
	...
	}
...
}


----------------------------------
18. OurMessageChain{ config.isDefault().booleanValue(), degree= 2, category= LOW, containerMethod= afterPropertiesSet(), containerClass= ReferenceBean}
-----

public class ReferenceBean{
...
	public void afterPropertiesSet() throws Exception{
	...
		... config.isDefaultBooleanValue();
	...
	}
...
}

public class ConsumerConfig{
...
	public void isDefaultBooleanValue(){
	...
		... isDefault().booleanValue();
	...
	}
...
}


----------------------------------
19. OurMessageChain{ config.isDefault().booleanValue(), degree= 2, category= LOW, containerMethod= afterPropertiesSet(), containerClass= ReferenceBean}
-----

public class ReferenceBean{
...
	public void afterPropertiesSet() throws Exception{
	...
		... config.isDefaultBooleanValue();
	...
	}
...
}

public class ConsumerConfig{
...
	public void isDefaultBooleanValue(){
	...
		... isDefault().booleanValue();
	...
	}
...
}


----------------------------------
20. OurMessageChain{ config.isDefault().booleanValue(), degree= 2, category= LOW, containerMethod= afterPropertiesSet(), containerClass= ReferenceBean}
-----

public class ReferenceBean{
...
	public void afterPropertiesSet() throws Exception{
	...
		... config.isDefaultBooleanValue();
	...
	}
...
}

public class ConsumerConfig{
...
	public void isDefaultBooleanValue(){
	...
		... isDefault().booleanValue();
	...
	}
...
}


----------------------------------
21. OurMessageChain{ config.isDefault().booleanValue(), degree= 2, category= LOW, containerMethod= afterPropertiesSet(), containerClass= ServiceBean}
-----

public class ServiceBean{
...
	public void afterPropertiesSet() throws Exception{
	...
		... config.isDefaultBooleanValue();
	...
	}
...
}

public class ProviderConfig{
...
	public void isDefaultBooleanValue(){
	...
		... isDefault().booleanValue();
	...
	}
...
}


----------------------------------
22. OurMessageChain{ config.isDefault().booleanValue(), degree= 2, category= LOW, containerMethod= afterPropertiesSet(), containerClass= ServiceBean}
-----

public class ServiceBean{
...
	public void afterPropertiesSet() throws Exception{
	...
		... config.isDefaultBooleanValue();
	...
	}
...
}

public class ProviderConfig{
...
	public void isDefaultBooleanValue(){
	...
		... isDefault().booleanValue();
	...
	}
...
}


----------------------------------
23. OurMessageChain{ config.isDefault().booleanValue(), degree= 2, category= LOW, containerMethod= afterPropertiesSet(), containerClass= ServiceBean}
-----

public class ServiceBean{
...
	public void afterPropertiesSet() throws Exception{
	...
		... config.isDefaultBooleanValue();
	...
	}
...
}

public class ProviderConfig{
...
	public void isDefaultBooleanValue(){
	...
		... isDefault().booleanValue();
	...
	}
...
}


----------------------------------
24. OurMessageChain{ config.isDefault().booleanValue(), degree= 2, category= LOW, containerMethod= afterPropertiesSet(), containerClass= ServiceBean}
-----

public class ServiceBean{
...
	public void afterPropertiesSet() throws Exception{
	...
		... config.isDefaultBooleanValue();
	...
	}
...
}

public class ProviderConfig{
...
	public void isDefaultBooleanValue(){
	...
		... isDefault().booleanValue();
	...
	}
...
}


----------------------------------
25. OurMessageChain{ config.isDefault().booleanValue(), degree= 2, category= LOW, containerMethod= afterPropertiesSet(), containerClass= ServiceBean}
-----

public class ServiceBean{
...
	public void afterPropertiesSet() throws Exception{
	...
		... config.isDefaultBooleanValue();
	...
	}
...
}

public class ProviderConfig{
...
	public void isDefaultBooleanValue(){
	...
		... isDefault().booleanValue();
	...
	}
...
}


----------------------------------
26. OurMessageChain{ config.isDefault().booleanValue(), degree= 2, category= LOW, containerMethod= afterPropertiesSet(), containerClass= ServiceBean}
-----

public class ServiceBean{
...
	public void afterPropertiesSet() throws Exception{
	...
		... config.isDefaultBooleanValue();
	...
	}
...
}

public class ProviderConfig{
...
	public void isDefaultBooleanValue(){
	...
		... isDefault().booleanValue();
	...
	}
...
}


----------------------------------
27. OurMessageChain{ config.isDefault().booleanValue(), degree= 2, category= LOW, containerMethod= afterPropertiesSet(), containerClass= ServiceBean}
-----

public class ServiceBean{
...
	public void afterPropertiesSet() throws Exception{
	...
		... config.isDefaultBooleanValue();
	...
	}
...
}

public class ProviderConfig{
...
	public void isDefaultBooleanValue(){
	...
		... isDefault().booleanValue();
	...
	}
...
}


----------------------------------
28. OurMessageChain{ page.getRows().size(), degree= 2, category= LOW, containerMethod= doPost(), containerClass= PageServlet}
-----

public class PageServlet{
...
	protected final void doPost(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException{
	...
		... page.rowsSize();
	...
	}
...
}

public class Page{
...
	public void rowsSize(){
	...
		... getRows().size();
	...
	}
...
}


----------------------------------
29. OurMessageChain{ statistics.getUrl().addParameters(MonitorService.TIMESTAMP, timestamp, MonitorService.SUCCESS, String.valueOf(success), MonitorService.FAILURE, String.valueOf(failure), MonitorService.INPUT, String.valueOf(input), MonitorService.OUTPUT, String.valueOf(output), MonitorService.ELAPSED, String.valueOf(elapsed), MonitorService.CONCURRENT, String.valueOf(concurrent), MonitorService.MAX_INPUT, String.valueOf(maxInput), MonitorService.MAX_OUTPUT, String.valueOf(maxOutput), MonitorService.MAX_ELAPSED, String.valueOf(maxElapsed), MonitorService.MAX_CONCURRENT, String.valueOf(maxConcurrent)), degree= 2, category= LOW, containerMethod= send(), containerClass= DubboMonitor}
-----

public class DubboMonitor{
...
	public void send(){
	...
		... statistics.urlAddParameters();
	...
	}
...
}

public class Statistics{
...
	public URL urlAddParameters(){
	...
		... getUrl().addParameters();
	...
	}
...
}


----------------------------------
30. OurMessageChain{ providerUrl.getProtocol().equals(acceptProtocol), degree= 2, category= LOW, containerMethod= toInvokers(), containerClass= RegistryDirectory}
-----

public class RegistryDirectory{
...
	private Map<String, Invoker<T>> toInvokers(List<URL> urls){
	...
		... providerUrl.protocolEquals();
	...
	}
...
}

public class URL{
...
	public void protocolEquals(){
	...
		... getProtocol().equals();
	...
	}
...
}


----------------------------------
31. OurMessageChain{ providerUrl.getPath().length(), degree= 2, category= LOW, containerMethod= mergeUrl(), containerClass= RegistryDirectory}
-----

public class RegistryDirectory{
...
	private URL mergeUrl(URL providerUrl){
	...
		... providerUrl.pathLength();
	...
	}
...
}

public class URL{
...
	public void pathLength(){
	...
		... getPath().length();
	...
	}
...
}


----------------------------------
32. OurMessageChain{ router.getUrl().getParameter(Constants.RUNTIME_KEY, true), degree= 2, category= LOW, containerMethod= route(), containerClass= RegistryDirectory}
-----

public class RegistryDirectory{
...
	private List<Invoker<T>> route(List<Invoker<T>> invokers, String method){
	...
		... router.urlParameter();
	...
	}
...
}

public class Router{
...
	public String urlParameter(){
	...
		... getUrl().getParameter();
	...
	}
...
}


----------------------------------
33. OurMessageChain{ registryUrl.setProtocol(protocol).removeParameter(Constants.REGISTRY_KEY), degree= 2, category= LOW, containerMethod= getRegistry(), containerClass= RegistryProtocol}
-----

public class RegistryProtocol{
...
	private Registry getRegistry(final Invoker<?> originInvoker){
	...
		... registryUrl.setProtocolRemoveParameter();
	...
	}
...
}

public class URL{
...
	public URL setProtocolRemoveParameter(){
	...
		... setProtocol(protocol).removeParameter();
	...
	}
...
}


----------------------------------
34. OurMessageChain{ providerUrl.removeParameters(getFilteredKeys(providerUrl)).removeParameter(Constants.MONITOR_KEY), degree= 2, category= LOW, containerMethod= getRegistedProviderUrl(), containerClass= RegistryProtocol}
-----

public class RegistryProtocol{
...
	private URL getRegistedProviderUrl(final Invoker<?> originInvoker){
	...
		... providerUrl.removeParametersRemoveParameter();
	...
	}
...
}

public class URL{
...
	public URL removeParametersRemoveParameter(){
	...
		... removeParameters(getFilteredKeys(providerUrl)).removeParameter();
	...
	}
...
}


----------------------------------
35. OurMessageChain{ providerUrl.removeParameters("dynamic", "enabled").toFullString(), degree= 2, category= LOW, containerMethod= getCacheKey(), containerClass= RegistryProtocol}
-----

public class RegistryProtocol{
...
	private String getCacheKey(final Invoker<?> originInvoker){
	...
		... providerUrl.removeParametersToFullString();
	...
	}
...
}

public class URL{
...
	public String removeParametersToFullString(){
	...
		... removeParameters("dynamic", "enabled").toFullString();
	...
	}
...
}


----------------------------------
36. OurMessageChain{ r.getUrl().getAddress(), degree= 2, category= LOW, containerMethod= handle(), containerClass= RegisteredPageHandler}
-----

public class RegisteredPageHandler{
...
	public Page handle(URL url){
	...
		... r.urlAddress();
	...
	}
...
}

public class Registry{
...
	public void urlAddress(){
	...
		... getUrl().getAddress();
	...
	}
...
}


----------------------------------
37. OurMessageChain{ registry.getUrl().getAddress(), degree= 2, category= LOW, containerMethod= handle(), containerClass= RegistriesPageHandler}
-----

public class RegistriesPageHandler{
...
	public Page handle(URL url){
	...
		... registry.urlAddress();
	...
	}
...
}

public class Registry{
...
	public void urlAddress(){
	...
		... getUrl().getAddress();
	...
	}
...
}


----------------------------------
38. OurMessageChain{ r.getUrl().getAddress(), degree= 2, category= LOW, containerMethod= handle(), containerClass= SubscribedPageHandler}
-----

public class SubscribedPageHandler{
...
	public Page handle(URL url){
	...
		... r.urlAddress();
	...
	}
...
}

public class Registry{
...
	public void urlAddress(){
	...
		... getUrl().getAddress();
	...
	}
...
}


----------------------------------
39. OurMessageChain{ url.getIp().equals(host), degree= 2, category= LOW, containerMethod= getExchangeChannel(), containerClass= ExchangeServerPeer}
-----

public class ExchangeServerPeer{
...
	public ExchangeChannel getExchangeChannel(InetSocketAddress remoteAddress){
	...
		... url.ipEquals();
	...
	}
...
}

public class URL{
...
	public void ipEquals(){
	...
		... getIp().equals();
	...
	}
...
}


----------------------------------
40. OurMessageChain{ url.getIp().equals(host), degree= 2, category= LOW, containerMethod= getChannel(), containerClass= ServerPeer}
-----

public class ServerPeer{
...
	public Channel getChannel(InetSocketAddress remoteAddress){
	...
		... url.ipEquals();
	...
	}
...
}

public class URL{
...
	public void ipEquals(){
	...
		... getIp().equals();
	...
	}
...
}


----------------------------------
41. OurMessageChain{ referurl.addParametersIfAbsent(url.getParameters()).removeParameter(Constants.METHODS_KEY), degree= 2, category= LOW, containerMethod= referOrdestroyCallbackService(), containerClass= CallbackServiceCodec}
-----

public class CallbackServiceCodec{
...
	private static Object referOrdestroyCallbackService(Channel channel, URL url, Class<?> clazz, Invocation inv, int instid, boolean isRefer){
	...
		... referurl.addParametersIfAbsentRemoveParameter();
	...
	}
...
}

public class URL{
...
	public URL addParametersIfAbsentRemoveParameter(){
	...
		... addParametersIfAbsent(url.getParameters()).removeParameter();
	...
	}
...
}


----------------------------------
42. OurMessageChain{ inv.getMethodName().equals(method), degree= 2, category= LOW, containerMethod= reply(), containerClass= DubboProtocol}
-----

public class DubboProtocol{
...
	public Object reply(ExchangeChannel channel, Object message) throws RemotingException{
	...
		... inv.methodNameEquals();
	...
	}
...
}

public class Invocation{
...
	public void methodNameEquals(){
	...
		... getMethodName().equals();
	...
	}
...
}


----------------------------------
43. OurMessageChain{ inv.getMethodName().equals(methodsStr), degree= 2, category= LOW, containerMethod= reply(), containerClass= DubboProtocol}
-----

public class DubboProtocol{
...
	public Object reply(ExchangeChannel channel, Object message) throws RemotingException{
	...
		... inv.methodNameEquals();
	...
	}
...
}

public class Invocation{
...
	public void methodNameEquals(){
	...
		... getMethodName().equals();
	...
	}
...
}


----------------------------------
44. OurMessageChain{ s.getExchangeChannels().size(), degree= 2, category= LOW, containerMethod= handle(), containerClass= ServersPageHandler}
-----

public class ServersPageHandler{
...
	public Page handle(URL url){
	...
		... s.exchangeChannelsSize();
	...
	}
...
}

public class ExchangeServer{
...
	public void exchangeChannelsSize(){
	...
		... getExchangeChannels().size();
	...
	}
...
}


----------------------------------
45. OurMessageChain{ inv.getAttachments().get(Constants.INTERFACE_KEY), degree= 2, category= LOW, containerMethod= reply(), containerClass= ThriftProtocol}
-----

public class ThriftProtocol{
...
	public Object reply(ExchangeChannel channel, Object msg) throws RemotingException{
	...
		... inv.attachments();
	...
	}
...
}

public class Invocation{
...
	public void attachments(){
	...
		... getAttachments().get();
	...
	}
...
}

