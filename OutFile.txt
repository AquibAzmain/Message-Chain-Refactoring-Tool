There are 179 Message Chains in project ok
Following are the Message Chains and their respective refactoring suggestion:

----------------------------------
1. OurMessageChain{ cacheResponse.newBuilder().headers(combine(cacheResponse.headers(), networkResponse.headers())).sentRequestAtMillis(networkResponse.sentRequestAtMillis()).receivedResponseAtMillis(networkResponse.receivedResponseAtMillis()).cacheResponse(stripBody(cacheResponse)).networkResponse(stripBody(networkResponse)).build(), degree= 7, category= HIGH, containerMethod= intercept(), containerClass= CacheInterceptor}
-----

public class CacheInterceptor{
...
	public Response intercept(Chain chain) throws IOException{
	...
		... cacheResponse.newBuilderHeadersSentRequestAtMillisReceivedResponseAtMillisCacheResponseNetworkResponseBuild();
	...
	}
...
}


----------------------------------
2. OurMessageChain{ originalRequest.newBuilder().header("Upgrade", "websocket").header("Connection", "Upgrade").header("Sec-WebSocket-Key", key).header("Sec-WebSocket-Version", "13").build(), degree= 6, category= MEDIUM, containerMethod= connect(), containerClass= RealWebSocket}
-----

public class RealWebSocket{
...
	public void connect(OkHttpClient client){
	...
		... originalRequest.newBuilderHeaderHeaderHeaderHeaderBuild();
	...
	}
...
}


----------------------------------
3. OurMessageChain{ baseUrl.newBuilder("oauth.access").addQueryParameter("client_id", clientId).addQueryParameter("client_secret", clientSecret).addQueryParameter("code", code).addQueryParameter("redirect_uri", redirectUrl.toString()).build(), degree= 6, category= MEDIUM, containerMethod= exchangeCode(), containerClass= SlackApi}
-----

public class SlackApi{
...
	public OAuthSession exchangeCode(String code, HttpUrl redirectUrl) throws IOException{
	...
		... baseUrl.newBuilderAddQueryParameterAddQueryParameterAddQueryParameterAddQueryParameterBuild();
	...
	}
...
}


----------------------------------
4. OurMessageChain{ networkResponse.headers().newBuilder().removeAll("Content-Encoding").removeAll("Content-Length").build(), degree= 5, category= MEDIUM, containerMethod= intercept(), containerClass= BridgeInterceptor}
-----

public class BridgeInterceptor{
...
	public Response intercept(Chain chain) throws IOException{
	...
		... networkResponse.headersNewBuilderRemoveAllRemoveAllBuild();
	...
	}
...
}


----------------------------------
5. OurMessageChain{ baseUrl.newBuilder("/oauth/authorize").addQueryParameter("client_id", clientId).addQueryParameter("scope", scopes).addQueryParameter("redirect_uri", redirectUrl.toString()).addQueryParameter("state", state.base64()), degree= 5, category= MEDIUM, containerMethod= authorizeUrl(), containerClass= SlackApi}
-----

public class SlackApi{
...
	public HttpUrl authorizeUrl(String scopes, HttpUrl redirectUrl, ByteString state, String team){
	...
		... baseUrl.newBuilderAddQueryParameterAddQueryParameterAddQueryParameterAddQueryParameter();
	...
	}
...
}


----------------------------------
6. OurMessageChain{ client.newBuilder().sslSocketFactory(socketFactory, handshakeCertificates.trustManager()).hostnameVerifier(hostnameVerifier).build(), degree= 4, category= MEDIUM, containerMethod= prepare(), containerClass= OkHttpAsync}
-----

public class OkHttpAsync{
...
	public void prepare(final Benchmark benchmark){
	...
		... client.newBuilderSslSocketFactoryHostnameVerifierBuild();
	...
	}
...
}


----------------------------------
7. OurMessageChain{ networkResponse.newBuilder().cacheResponse(stripBody(cacheResponse)).networkResponse(stripBody(networkResponse)).build(), degree= 4, category= MEDIUM, containerMethod= intercept(), containerClass= CacheInterceptor}
-----

public class CacheInterceptor{
...
	public Response intercept(Chain chain) throws IOException{
	...
		... networkResponse.newBuilderCacheResponseNetworkResponseBuild();
	...
	}
...
}


----------------------------------
8. OurMessageChain{ headers.newBuilder().add(SELECTED_PROTOCOL, response.protocol().toString()).add(RESPONSE_SOURCE, responseSourceHeader(response)).build(), degree= 4, category= MEDIUM, containerMethod= getHeaders(), containerClass= OkHttpURLConnection}
-----

public class OkHttpURLConnection{
...
	private Headers getHeaders() throws IOException{
	...
		... headers.newBuilderAddAddBuild();
	...
	}
...
}


----------------------------------
9. OurMessageChain{ originalRequest.newBuilder().header("Content-Encoding", "gzip").method(originalRequest.method(), gzip(originalRequest.body())).build(), degree= 4, category= MEDIUM, containerMethod= intercept(), containerClass= RequestBodyCompression}
-----

public class RequestBodyCompression{
...
	public Response intercept(Chain chain) throws IOException{
	...
		... originalRequest.newBuilderHeaderMethodBuild();
	...
	}
...
}


----------------------------------
10. OurMessageChain{ cacheResponse.newBuilder().cacheResponse(stripBody(cacheResponse)).build(), degree= 3, category= LOW, containerMethod= intercept(), containerClass= CacheInterceptor}
-----

public class CacheInterceptor{
...
	public Response intercept(Chain chain) throws IOException{
	...
		... cacheResponse.newBuilderCacheResponseBuild();
	...
	}
...
}


----------------------------------
11. OurMessageChain{ request.newBuilder().headers(conditionalRequestHeaders.build()).build(), degree= 3, category= LOW, containerMethod= getCandidate(), containerClass= CacheStrategy}
-----

public class CacheStrategy{
...
	private CacheStrategy getCandidate(){
	...
		... request.newBuilderHeadersBuild();
	...
	}
...
}


----------------------------------
12. OurMessageChain{ cacheResponse.request().url().query(), degree= 3, category= LOW, containerMethod= computeFreshnessLifetime(), containerClass= CacheStrategy}
-----

public class CacheStrategy{
...
	private long computeFreshnessLifetime(){
	...
		... cacheResponse.requestUrlQuery();
	...
	}
...
}

public class Response{
...
	public String requestUrlQuery(){
	...
		... request().urlQuery();
	...
	}
...
}

public class Request{
...
	public String urlQuery(){
	...
		... url().query();
	...
	}
...
}


----------------------------------
13. OurMessageChain{ route.address().protocols().contains(Protocol.H2_PRIOR_KNOWLEDGE), degree= 3, category= LOW, containerMethod= connect(), containerClass= RealConnection}
-----

public class RealConnection{
...
	public void connect(int connectTimeout, int readTimeout, int writeTimeout, int pingIntervalMillis, boolean connectionRetryEnabled, Call call, EventListener eventListener){
	...
		... route.addressProtocolsContains();
	...
	}
...
}

public class Route{
...
	public void addressProtocolsContains(){
	...
		... address().protocolsContains();
	...
	}
...
}

public class Address{
...
	public void protocolsContains(){
	...
		... protocols().contains();
	...
	}
...
}


----------------------------------
14. OurMessageChain{ route.address().url().host(), degree= 3, category= LOW, containerMethod= connect(), containerClass= RealConnection}
-----

public class RealConnection{
...
	public void connect(int connectTimeout, int readTimeout, int writeTimeout, int pingIntervalMillis, boolean connectionRetryEnabled, Call call, EventListener eventListener){
	...
		... route.addressUrlHost();
	...
	}
...
}

public class Route{
...
	public String addressUrlHost(){
	...
		... address().urlHost();
	...
	}
...
}

public class Address{
...
	public String urlHost(){
	...
		... url().host();
	...
	}
...
}


----------------------------------
15. OurMessageChain{ route.address().protocols().contains(Protocol.H2_PRIOR_KNOWLEDGE), degree= 3, category= LOW, containerMethod= establishProtocol(), containerClass= RealConnection}
-----

public class RealConnection{
...
	private void establishProtocol(ConnectionSpecSelector connectionSpecSelector, int pingIntervalMillis, Call call, EventListener eventListener) throws IOException{
	...
		... route.addressProtocolsContains();
	...
	}
...
}

public class Route{
...
	public void addressProtocolsContains(){
	...
		... address().protocolsContains();
	...
	}
...
}

public class Address{
...
	public void protocolsContains(){
	...
		... protocols().contains();
	...
	}
...
}


----------------------------------
16. OurMessageChain{ tunnelConnection.readResponseHeaders(false).request(tunnelRequest).build(), degree= 3, category= LOW, containerMethod= createTunnel(), containerClass= RealConnection}
-----

public class RealConnection{
...
	private Request createTunnel(int readTimeout, int writeTimeout, Request tunnelRequest, HttpUrl url) throws IOException{
	...
		... tunnelConnection.readResponseHeadersRequestBuild();
	...
	}
...
}


----------------------------------
17. OurMessageChain{ route.address().proxyAuthenticator().authenticate(route, response), degree= 3, category= LOW, containerMethod= createTunnel(), containerClass= RealConnection}
-----

public class RealConnection{
...
	private Request createTunnel(int readTimeout, int writeTimeout, Request tunnelRequest, HttpUrl url) throws IOException{
	...
		... route.addressProxyAuthenticatorAuthenticate();
	...
	}
...
}

public class Route{
...
	public Request addressProxyAuthenticatorAuthenticate(){
	...
		... address().proxyAuthenticatorAuthenticate();
	...
	}
...
}

public class Address{
...
	public Request proxyAuthenticatorAuthenticate(){
	...
		... proxyAuthenticator().authenticate();
	...
	}
...
}


----------------------------------
18. OurMessageChain{ route.address().url().port(), degree= 3, category= LOW, containerMethod= supportsUrl(), containerClass= RealConnection}
-----

public class RealConnection{
...
	public boolean supportsUrl(HttpUrl url){
	...
		... route.addressUrlPort();
	...
	}
...
}

public class Route{
...
	public int addressUrlPort(){
	...
		... address().urlPort();
	...
	}
...
}

public class Address{
...
	public int urlPort(){
	...
		... url().port();
	...
	}
...
}


----------------------------------
19. OurMessageChain{ route.address().url().host(), degree= 3, category= LOW, containerMethod= toString(), containerClass= RealConnection}
-----

public class RealConnection{
...
	public String toString(){
	...
		... route.addressUrlHost();
	...
	}
...
}

public class Route{
...
	public String addressUrlHost(){
	...
		... address().urlHost();
	...
	}
...
}

public class Address{
...
	public String urlHost(){
	...
		... url().host();
	...
	}
...
}


----------------------------------
20. OurMessageChain{ route.address().url().port(), degree= 3, category= LOW, containerMethod= toString(), containerClass= RealConnection}
-----

public class RealConnection{
...
	public String toString(){
	...
		... route.addressUrlPort();
	...
	}
...
}

public class Route{
...
	public int addressUrlPort(){
	...
		... address().urlPort();
	...
	}
...
}

public class Address{
...
	public int urlPort(){
	...
		... url().port();
	...
	}
...
}


----------------------------------
21. OurMessageChain{ response.newBuilder().body(httpCodec.openResponseBody(response)).build(), degree= 3, category= LOW, containerMethod= intercept(), containerClass= CallServerInterceptor}
-----

public class CallServerInterceptor{
...
	public Response intercept(Chain chain) throws IOException{
	...
		... response.newBuilderBodyBuild();
	...
	}
...
}


----------------------------------
22. OurMessageChain{ response.newBuilder().body(Util.EMPTY_RESPONSE).build(), degree= 3, category= LOW, containerMethod= intercept(), containerClass= CallServerInterceptor}
-----

public class CallServerInterceptor{
...
	public Response intercept(Chain chain) throws IOException{
	...
		... response.newBuilderBodyBuild();
	...
	}
...
}


----------------------------------
23. OurMessageChain{ response.newBuilder().priorResponse(priorResponse.newBuilder().body(null).build()).build(), degree= 3, category= LOW, containerMethod= intercept(), containerClass= RetryAndFollowUpInterceptor}
-----

public class RetryAndFollowUpInterceptor{
...
	public Response intercept(Chain chain) throws IOException{
	...
		... response.newBuilderPriorResponseBuild();
	...
	}
...
}


----------------------------------
24. OurMessageChain{ streamAllocation.connection().socket().setSoTimeout(0), degree= 3, category= LOW, containerMethod= onResponse(), containerClass= RealWebSocket}
-----

public class RealWebSocket{
...
	public void onResponse(Call call, Response response){
	...
		... streamAllocation.connectionSocketSetSoTimeout();
	...
	}
...
}

public class StreamAllocation{
...
	public void connectionSocketSetSoTimeout(){
	...
		... connection().socketSetSoTimeout();
	...
	}
...
}

public class RealConnection{
...
	public void socketSetSoTimeout(){
	...
		... socket().setSoTimeout();
	...
	}
...
}


----------------------------------
25. OurMessageChain{ client.newBuilder().proxy(proxy).build(), degree= 3, category= LOW, containerMethod= setParameter(), containerClass= OkApacheClient}
-----

public class OkApacheClient{
...
	public HttpParams setParameter(String name, Object value){
	...
		... client.newBuilderProxyBuild();
	...
	}
...
}


----------------------------------
26. OurMessageChain{ url.newBuilder().addQueryParameter("dns", encoded).build(), degree= 3, category= LOW, containerMethod= buildRequest(), containerClass= DnsOverHttps}
-----

public class DnsOverHttps{
...
	private Request buildRequest(ByteString query){
	...
		... url.newBuilderAddQueryParameterBuild();
	...
	}
...
}


----------------------------------
27. OurMessageChain{ client.newBuilder().connectTimeout(timeoutMillis, TimeUnit.MILLISECONDS).build(), degree= 3, category= LOW, containerMethod= setConnectTimeout(), containerClass= OkHttpURLConnection}
-----

public class OkHttpURLConnection{
...
	public void setConnectTimeout(int timeoutMillis){
	...
		... client.newBuilderConnectTimeoutBuild();
	...
	}
...
}


----------------------------------
28. OurMessageChain{ client.newBuilder().followRedirects(followRedirects).build(), degree= 3, category= LOW, containerMethod= setInstanceFollowRedirects(), containerClass= OkHttpURLConnection}
-----

public class OkHttpURLConnection{
...
	public void setInstanceFollowRedirects(boolean followRedirects){
	...
		... client.newBuilderFollowRedirectsBuild();
	...
	}
...
}


----------------------------------
29. OurMessageChain{ client.newBuilder().readTimeout(timeoutMillis, TimeUnit.MILLISECONDS).build(), degree= 3, category= LOW, containerMethod= setReadTimeout(), containerClass= OkHttpURLConnection}
-----

public class OkHttpURLConnection{
...
	public void setReadTimeout(int timeoutMillis){
	...
		... client.newBuilderReadTimeoutBuild();
	...
	}
...
}


----------------------------------
30. OurMessageChain{ response.request().url().url(), degree= 3, category= LOW, containerMethod= onResponse(), containerClass= OkHttpURLConnection}
-----

public class OkHttpURLConnection{
...
	public void onResponse(Call call, Response response){
	...
		... response.requestUrlUrl();
	...
	}
...
}

public class Response{
...
	public URL requestUrlUrl(){
	...
		... request().urlUrl();
	...
	}
...
}

public class Request{
...
	public URL urlUrl(){
	...
		... url().url();
	...
	}
...
}


----------------------------------
31. OurMessageChain{ response.request().url().url(), degree= 3, category= LOW, containerMethod= intercept(), containerClass= OkHttpURLConnection}
-----

public class OkHttpURLConnection{
...
	public Response intercept(Chain chain) throws IOException{
	...
		... response.requestUrlUrl();
	...
	}
...
}

public class Response{
...
	public URL requestUrlUrl(){
	...
		... request().urlUrl();
	...
	}
...
}

public class Request{
...
	public URL urlUrl(){
	...
		... url().url();
	...
	}
...
}


----------------------------------
32. OurMessageChain{ request.newBuilder().header(proxyAuthorization ? "Proxy-Authorization" : "Authorization", credential).build(), degree= 3, category= LOW, containerMethod= authenticate(), containerClass= JavaNetAuthenticator}
-----

public class JavaNetAuthenticator{
...
	public Request authenticate(Route route, Response response) throws IOException{
	...
		... request.newBuilderHeaderBuild();
	...
	}
...
}


----------------------------------
33. OurMessageChain{ client.newBuilder().proxy(proxy).build(), degree= 3, category= LOW, containerMethod= open(), containerClass= OkUrlFactory}
-----

public class OkUrlFactory{
...
	HttpURLConnection open(URL url, Proxy proxy){
	...
		... client.newBuilderProxyBuild();
	...
	}
...
}


----------------------------------
34. OurMessageChain{ response.request().url().resolve(href), degree= 3, category= LOW, containerMethod= fetch(), containerClass= Crawler}
-----

public class Crawler{
...
	public void fetch(HttpUrl url) throws IOException{
	...
		... response.requestUrlResolve();
	...
	}
...
}

public class Response{
...
	public HttpUrl requestUrlResolve(){
	...
		... request().urlResolve();
	...
	}
...
}

public class Request{
...
	public HttpUrl urlResolve(){
	...
		... url().resolve();
	...
	}
...
}


----------------------------------
35. OurMessageChain{ client.newBuilder().readTimeout(500, TimeUnit.MILLISECONDS).build(), degree= 3, category= LOW, containerMethod= run(), containerClass= PerCallSettings}
-----

public class PerCallSettings{
...
	public void run() throws Exception{
	...
		... client.newBuilderReadTimeoutBuild();
	...
	}
...
}


----------------------------------
36. OurMessageChain{ client.newBuilder().readTimeout(3000, TimeUnit.MILLISECONDS).build(), degree= 3, category= LOW, containerMethod= run(), containerClass= PerCallSettings}
-----

public class PerCallSettings{
...
	public void run() throws Exception{
	...
		... client.newBuilderReadTimeoutBuild();
	...
	}
...
}


----------------------------------
37. OurMessageChain{ response.body().source().readByteString(), degree= 3, category= LOW, containerMethod= run(), containerClass= PrintEventsNonConcurrent}
-----

public class PrintEventsNonConcurrent{
...
	public void run() throws Exception{
	...
		... response.bodySourceReadByteString();
	...
	}
...
}

public class Response{
...
	public void bodySourceReadByteString(){
	...
		... body().sourceReadByteString();
	...
	}
...
}

public class ResponseBody{
...
	public void sourceReadByteString(){
	...
		... source().readByteString();
	...
	}
...
}


----------------------------------
38. OurMessageChain{ response.body().source().readByteString(), degree= 3, category= LOW, containerMethod= run(), containerClass= PrintEventsNonConcurrent}
-----

public class PrintEventsNonConcurrent{
...
	public void run() throws Exception{
	...
		... response.bodySourceReadByteString();
	...
	}
...
}

public class Response{
...
	public void bodySourceReadByteString(){
	...
		... body().sourceReadByteString();
	...
	}
...
}

public class ResponseBody{
...
	public void sourceReadByteString(){
	...
		... source().readByteString();
	...
	}
...
}


----------------------------------
39. OurMessageChain{ originalResponse.newBuilder().body(new ProgressResponseBody(originalResponse.body(), progressListener)).build(), degree= 3, category= LOW, containerMethod= intercept(), containerClass= Progress}
-----

public class Progress{
...
	public Response intercept(Chain chain) throws IOException{
	...
		... originalResponse.newBuilderBodyBuild();
	...
	}
...
}


----------------------------------
40. OurMessageChain{ originalResponse.newBuilder().header("Cache-Control", "max-age=60").build(), degree= 3, category= LOW, containerMethod= intercept(), containerClass= RewriteResponseCacheControl}
-----

public class RewriteResponseCacheControl{
...
	public Response intercept(Chain chain) throws IOException{
	...
		... originalResponse.newBuilderHeaderBuild();
	...
	}
...
}


----------------------------------
41. OurMessageChain{ client.newBuilder().addNetworkInterceptor(REWRITE_CACHE_CONTROL_INTERCEPTOR).build(), degree= 3, category= LOW, containerMethod= run(), containerClass= RewriteResponseCacheControl}
-----

public class RewriteResponseCacheControl{
...
	public void run() throws Exception{
	...
		... client.newBuilderAddNetworkInterceptorBuild();
	...
	}
...
}


----------------------------------
42. OurMessageChain{ client.dispatcher().executorService().shutdown(), degree= 3, category= LOW, containerMethod= run(), containerClass= WebSocketEcho}
-----

public class WebSocketEcho{
...
	private void run(){
	...
		... client.dispatcherExecutorServiceShutdown();
	...
	}
...
}


----------------------------------
43. OurMessageChain{ baseUrl.newBuilder("rtm.start").addQueryParameter("token", accessToken).build(), degree= 3, category= LOW, containerMethod= rtmStart(), containerClass= SlackApi}
-----

public class SlackApi{
...
	public RtmStartResponse rtmStart(String accessToken) throws IOException{
	...
		... baseUrl.newBuilderAddQueryParameterBuild();
	...
	}
...
}


----------------------------------
44. OurMessageChain{ handshakeCertificates.sslContext().createSSLEngine(), degree= 2, category= LOW, containerMethod= initChannel(), containerClass= NettyHttpClient}
-----

public class NettyHttpClient{
...
	public void initChannel(SocketChannel channel){
	...
		... handshakeCertificates.sslContextCreateSSLEngine();
	...
	}
...
}

public class HandshakeCertificates{
...
	public void sslContextCreateSSLEngine(){
	...
		... sslContext().createSSLEngine();
	...
	}
...
}


----------------------------------
45. OurMessageChain{ handshakeCertificates.sslContext().createSSLEngine(), degree= 2, category= LOW, containerMethod= prepare(), containerClass= NettyHttpClient}
-----

public class NettyHttpClient{
...
	public void prepare(final Benchmark benchmark){
	...
		... handshakeCertificates.sslContextCreateSSLEngine();
	...
	}
...
}

public class HandshakeCertificates{
...
	public void sslContextCreateSSLEngine(){
	...
		... sslContext().createSSLEngine();
	...
	}
...
}


----------------------------------
46. OurMessageChain{ call.execute().body(), degree= 2, category= LOW, containerMethod= run(), containerClass= OkHttp}
-----

public class OkHttp{
...
	public void run(){
	...
		... call.executeBody();
	...
	}
...
}

public class Call{
...
	public ResponseBody executeBody(){
	...
		... execute().body();
	...
	}
...
}


----------------------------------
47. OurMessageChain{ client.newCall(new Request.Builder().tag(System.nanoTime()).url(url).build()).enqueue(callback), degree= 2, category= LOW, containerMethod= enqueue(), containerClass= OkHttpAsync}
-----

public class OkHttpAsync{
...
	public void enqueue(HttpUrl url) throws Exception{
	...
		... client.newCallEnqueue();
	...
	}
...
}

public class OkHttpClient{
...
	public void newCallEnqueue(){
	...
		... newCall(new Request.Builder().tag(System.nanoTime()).url(url).build()).enqueue();
	...
	}
...
}


----------------------------------
48. OurMessageChain{ url.url().openConnection(), degree= 2, category= LOW, containerMethod= run(), containerClass= UrlConnection}
-----

public class UrlConnection{
...
	public void run(){
	...
		... url.urlOpenConnection();
	...
	}
...
}

public class HttpUrl{
...
	public void urlOpenConnection(){
	...
		... url().openConnection();
	...
	}
...
}


----------------------------------
49. OurMessageChain{ dispatcher.peek().getSocketPolicy(), degree= 2, category= LOW, containerMethod= acceptConnections(), containerClass= MockWebServer}
-----

public class MockWebServer{
...
	private void acceptConnections() throws Exception{
	...
		... dispatcher.peekSocketPolicy();
	...
	}
...
}

public class Dispatcher{
...
	public SocketPolicy peekSocketPolicy(){
	...
		... peek().getSocketPolicy();
	...
	}
...
}


----------------------------------
50. OurMessageChain{ dispatcher.peek().getSocketPolicy(), degree= 2, category= LOW, containerMethod= processConnection(), containerClass= MockWebServer}
-----

public class MockWebServer{
...
	public void processConnection() throws Exception{
	...
		... dispatcher.peekSocketPolicy();
	...
	}
...
}

public class Dispatcher{
...
	public SocketPolicy peekSocketPolicy(){
	...
		... peek().getSocketPolicy();
	...
	}
...
}


----------------------------------
51. OurMessageChain{ dispatcher.peek().getSocketPolicy(), degree= 2, category= LOW, containerMethod= createTunnel(), containerClass= MockWebServer}
-----

public class MockWebServer{
...
	private void createTunnel() throws IOException, InterruptedException{
	...
		... dispatcher.peekSocketPolicy();
	...
	}
...
}

public class Dispatcher{
...
	public SocketPolicy peekSocketPolicy(){
	...
		... peek().getSocketPolicy();
	...
	}
...
}


----------------------------------
52. OurMessageChain{ dispatcher.peek().getSocketPolicy(), degree= 2, category= LOW, containerMethod= readRequest(), containerClass= MockWebServer}
-----

public class MockWebServer{
...
	private RecordedRequest readRequest(Socket socket, BufferedSource source, BufferedSink sink, int sequenceNumber) throws IOException{
	...
		... dispatcher.peekSocketPolicy();
	...
	}
...
}

public class Dispatcher{
...
	public SocketPolicy peekSocketPolicy(){
	...
		... peek().getSocketPolicy();
	...
	}
...
}


----------------------------------
53. OurMessageChain{ pushPromise.response().getBody(), degree= 2, category= LOW, containerMethod= pushPromises(), containerClass= MockWebServer}
-----

public class MockWebServer{
...
	private void pushPromises(Http2Stream stream, List<PushPromise> promises) throws IOException{
	...
		... pushPromise.responseBody();
	...
	}
...
}

public class PushPromise{
...
	public Buffer responseBody(){
	...
		... response().getBody();
	...
	}
...
}


----------------------------------
54. OurMessageChain{ client.newCall(request).execute(), degree= 2, category= LOW, containerMethod= run(), containerClass= Main}
-----

public class Main{
...
	public void run(){
	...
		... client.newCallExecute();
	...
	}
...
}

public class OkHttpClient{
...
	public Response newCallExecute(){
	...
		... newCall(request).execute();
	...
	}
...
}


----------------------------------
55. OurMessageChain{ response.body().source(), degree= 2, category= LOW, containerMethod= run(), containerClass= Main}
-----

public class Main{
...
	public void run(){
	...
		... response.bodySource();
	...
	}
...
}

public class Response{
...
	public BufferedSource bodySource(){
	...
		... body().source();
	...
	}
...
}


----------------------------------
56. OurMessageChain{ response.body().close(), degree= 2, category= LOW, containerMethod= run(), containerClass= Main}
-----

public class Main{
...
	public void run(){
	...
		... response.bodyClose();
	...
	}
...
}

public class Response{
...
	public void bodyClose(){
	...
		... body().close();
	...
	}
...
}


----------------------------------
57. OurMessageChain{ client.connectionPool().evictAll(), degree= 2, category= LOW, containerMethod= close(), containerClass= Main}
-----

public class Main{
...
	private void close(){
	...
		... client.connectionPoolEvictAll();
	...
	}
...
}

public class OkHttpClient{
...
	public void connectionPoolEvictAll(){
	...
		... connectionPool().evictAll();
	...
	}
...
}


----------------------------------
58. OurMessageChain{ that.name.equals(name), degree= 2, category= LOW, containerMethod= equals(), containerClass= Cookie}
-----

public class Cookie{
...
	public boolean equals(@Nullable Object other){
	...
		... that.nameEquals();
	...
	}
...
}

public class Cookie{
...
	public void nameEquals(){
	...
		... name.equals();
	...
	}
...
}


----------------------------------
59. OurMessageChain{ that.value.equals(value), degree= 2, category= LOW, containerMethod= equals(), containerClass= Cookie}
-----

public class Cookie{
...
	public boolean equals(@Nullable Object other){
	...
		... that.valueEquals();
	...
	}
...
}

public class Cookie{
...
	public void valueEquals(){
	...
		... value.equals();
	...
	}
...
}


----------------------------------
60. OurMessageChain{ that.domain.equals(domain), degree= 2, category= LOW, containerMethod= equals(), containerClass= Cookie}
-----

public class Cookie{
...
	public boolean equals(@Nullable Object other){
	...
		... that.domainEquals();
	...
	}
...
}

public class Cookie{
...
	public void domainEquals(){
	...
		... domain.equals();
	...
	}
...
}


----------------------------------
61. OurMessageChain{ that.path.equals(path), degree= 2, category= LOW, containerMethod= equals(), containerClass= Cookie}
-----

public class Cookie{
...
	public boolean equals(@Nullable Object other){
	...
		... that.pathEquals();
	...
	}
...
}

public class Cookie{
...
	public void pathEquals(){
	...
		... path.equals();
	...
	}
...
}


----------------------------------
62. OurMessageChain{ call.get().cancel(), degree= 2, category= LOW, containerMethod= cancelAll(), containerClass= Dispatcher}
-----

public class Dispatcher{
...
	public synchronized void cancelAll(){
	...
		... call.cancel();
	...
	}
...
}

public class RealCall{
...
	public void cancel(){
	...
		... get().cancel();
	...
	}
...
}


----------------------------------
63. OurMessageChain{ call.get().cancel(), degree= 2, category= LOW, containerMethod= cancelAll(), containerClass= Dispatcher}
-----

public class Dispatcher{
...
	public synchronized void cancelAll(){
	...
		... call.cancel();
	...
	}
...
}

public class RealCall{
...
	public void cancel(){
	...
		... get().cancel();
	...
	}
...
}


----------------------------------
64. OurMessageChain{ networkResponse.body().close(), degree= 2, category= LOW, containerMethod= intercept(), containerClass= CacheInterceptor}
-----

public class CacheInterceptor{
...
	public Response intercept(Chain chain) throws IOException{
	...
		... networkResponse.bodyClose();
	...
	}
...
}

public class Response{
...
	public void bodyClose(){
	...
		... body().close();
	...
	}
...
}


----------------------------------
65. OurMessageChain{ request.cacheControl().noStore(), degree= 2, category= LOW, containerMethod= isCacheable(), containerClass= CacheStrategy}
-----

public class CacheStrategy{
...
	public static boolean isCacheable(Response response, Request request){
	...
		... request.cacheControlNoStore();
	...
	}
...
}

public class Request{
...
	public boolean cacheControlNoStore(){
	...
		... cacheControl().noStore();
	...
	}
...
}


----------------------------------
66. OurMessageChain{ request.cacheControl().onlyIfCached(), degree= 2, category= LOW, containerMethod= get(), containerClass= CacheStrategy}
-----

public class CacheStrategy{
...
	public CacheStrategy get(){
	...
		... request.cacheControlOnlyIfCached();
	...
	}
...
}

public class Request{
...
	public boolean cacheControlOnlyIfCached(){
	...
		... cacheControl().onlyIfCached();
	...
	}
...
}


----------------------------------
67. OurMessageChain{ request.headers().newBuilder(), degree= 2, category= LOW, containerMethod= getCandidate(), containerClass= CacheStrategy}
-----

public class CacheStrategy{
...
	private CacheStrategy getCandidate(){
	...
		... request.headersNewBuilder();
	...
	}
...
}

public class Request{
...
	public Builder headersNewBuilder(){
	...
		... headers().newBuilder();
	...
	}
...
}


----------------------------------
68. OurMessageChain{ cacheResponse.cacheControl().maxAgeSeconds(), degree= 2, category= LOW, containerMethod= isFreshnessLifetimeHeuristic(), containerClass= CacheStrategy}
-----

public class CacheStrategy{
...
	private boolean isFreshnessLifetimeHeuristic(){
	...
		... cacheResponse.cacheControlMaxAgeSeconds();
	...
	}
...
}

public class Response{
...
	public int cacheControlMaxAgeSeconds(){
	...
		... cacheControl().maxAgeSeconds();
	...
	}
...
}


----------------------------------
69. OurMessageChain{ request.method().equals("GET"), degree= 2, category= LOW, containerMethod= intercept(), containerClass= ConnectInterceptor}
-----

public class ConnectInterceptor{
...
	public Response intercept(Chain chain) throws IOException{
	...
		... request.methodEquals();
	...
	}
...
}

public class Request{
...
	public void methodEquals(){
	...
		... method().equals();
	...
	}
...
}


----------------------------------
70. OurMessageChain{ route.address().connectionSpecs(), degree= 2, category= LOW, containerMethod= connect(), containerClass= RealConnection}
-----

public class RealConnection{
...
	public void connect(int connectTimeout, int readTimeout, int writeTimeout, int pingIntervalMillis, boolean connectionRetryEnabled, Call call, EventListener eventListener){
	...
		... route.addressConnectionSpecs();
	...
	}
...
}

public class Route{
...
	public List<ConnectionSpec> addressConnectionSpecs(){
	...
		... address().connectionSpecs();
	...
	}
...
}


----------------------------------
71. OurMessageChain{ route.address().sslSocketFactory(), degree= 2, category= LOW, containerMethod= connect(), containerClass= RealConnection}
-----

public class RealConnection{
...
	public void connect(int connectTimeout, int readTimeout, int writeTimeout, int pingIntervalMillis, boolean connectionRetryEnabled, Call call, EventListener eventListener){
	...
		... route.addressSslSocketFactory();
	...
	}
...
}

public class Route{
...
	public SSLSocketFactory addressSslSocketFactory(){
	...
		... address().sslSocketFactory();
	...
	}
...
}


----------------------------------
72. OurMessageChain{ address.socketFactory().createSocket(), degree= 2, category= LOW, containerMethod= connectSocket(), containerClass= RealConnection}
-----

public class RealConnection{
...
	private void connectSocket(int connectTimeout, int readTimeout, Call call, EventListener eventListener) throws IOException{
	...
		... address.socketFactoryCreateSocket();
	...
	}
...
}

public class Address{
...
	public void socketFactoryCreateSocket(){
	...
		... socketFactory().createSocket();
	...
	}
...
}


----------------------------------
73. OurMessageChain{ route.address().sslSocketFactory(), degree= 2, category= LOW, containerMethod= establishProtocol(), containerClass= RealConnection}
-----

public class RealConnection{
...
	private void establishProtocol(ConnectionSpecSelector connectionSpecSelector, int pingIntervalMillis, Call call, EventListener eventListener) throws IOException{
	...
		... route.addressSslSocketFactory();
	...
	}
...
}

public class Route{
...
	public SSLSocketFactory addressSslSocketFactory(){
	...
		... address().sslSocketFactory();
	...
	}
...
}


----------------------------------
74. OurMessageChain{ address.hostnameVerifier().verify(address.url().host(), sslSocketSession), degree= 2, category= LOW, containerMethod= connectTls(), containerClass= RealConnection}
-----

public class RealConnection{
...
	private void connectTls(ConnectionSpecSelector connectionSpecSelector) throws IOException{
	...
		... address.hostnameVerifierVerify();
	...
	}
...
}

public class Address{
...
	public void hostnameVerifierVerify(){
	...
		... hostnameVerifier().verify();
	...
	}
...
}


----------------------------------
75. OurMessageChain{ unverifiedHandshake.peerCertificates().get(0), degree= 2, category= LOW, containerMethod= connectTls(), containerClass= RealConnection}
-----

public class RealConnection{
...
	private void connectTls(ConnectionSpecSelector connectionSpecSelector) throws IOException{
	...
		... unverifiedHandshake.peerCertificates();
	...
	}
...
}

public class Handshake{
...
	public void peerCertificates(){
	...
		... peerCertificates().get();
	...
	}
...
}


----------------------------------
76. OurMessageChain{ address.url().host(), degree= 2, category= LOW, containerMethod= connectTls(), containerClass= RealConnection}
-----

public class RealConnection{
...
	private void connectTls(ConnectionSpecSelector connectionSpecSelector) throws IOException{
	...
		... address.urlHost();
	...
	}
...
}

public class Address{
...
	public String urlHost(){
	...
		... url().host();
	...
	}
...
}


----------------------------------
77. OurMessageChain{ address.certificatePinner().check(address.url().host(), unverifiedHandshake.peerCertificates()), degree= 2, category= LOW, containerMethod= connectTls(), containerClass= RealConnection}
-----

public class RealConnection{
...
	private void connectTls(ConnectionSpecSelector connectionSpecSelector) throws IOException{
	...
		... address.certificatePinnerCheck();
	...
	}
...
}

public class Address{
...
	public void certificatePinnerCheck(){
	...
		... certificatePinner().check();
	...
	}
...
}


----------------------------------
78. OurMessageChain{ route.proxy().type(), degree= 2, category= LOW, containerMethod= isEligible(), containerClass= RealConnection}
-----

public class RealConnection{
...
	public boolean isEligible(Address address, @Nullable Route route){
	...
		... route.proxyType();
	...
	}
...
}

public class Route{
...
	public void proxyType(){
	...
		... proxy().type();
	...
	}
...
}


----------------------------------
79. OurMessageChain{ route.address().hostnameVerifier(), degree= 2, category= LOW, containerMethod= isEligible(), containerClass= RealConnection}
-----

public class RealConnection{
...
	public boolean isEligible(Address address, @Nullable Route route){
	...
		... route.addressHostnameVerifier();
	...
	}
...
}

public class Route{
...
	public HostnameVerifier addressHostnameVerifier(){
	...
		... address().hostnameVerifier();
	...
	}
...
}


----------------------------------
80. OurMessageChain{ address.proxySelector().connectFailed(address.url().uri(), failedRoute.proxy().address(), failure), degree= 2, category= LOW, containerMethod= connectFailed(), containerClass= RouteSelector}
-----

public class RouteSelector{
...
	public void connectFailed(Route failedRoute, IOException failure){
	...
		... address.proxySelectorConnectFailed();
	...
	}
...
}

public class Address{
...
	public void proxySelectorConnectFailed(){
	...
		... proxySelector().connectFailed();
	...
	}
...
}


----------------------------------
81. OurMessageChain{ address.proxySelector().select(url.uri()), degree= 2, category= LOW, containerMethod= resetNextProxy(), containerClass= RouteSelector}
-----

public class RouteSelector{
...
	private void resetNextProxy(HttpUrl url, Proxy proxy){
	...
		... address.proxySelectorSelect();
	...
	}
...
}

public class Address{
...
	public void proxySelectorSelect(){
	...
		... proxySelector().select();
	...
	}
...
}


----------------------------------
82. OurMessageChain{ address.url().host(), degree= 2, category= LOW, containerMethod= nextProxy(), containerClass= RouteSelector}
-----

public class RouteSelector{
...
	private Proxy nextProxy() throws IOException{
	...
		... address.urlHost();
	...
	}
...
}

public class Address{
...
	public String urlHost(){
	...
		... url().host();
	...
	}
...
}


----------------------------------
83. OurMessageChain{ address.url().host(), degree= 2, category= LOW, containerMethod= resetNextInetSocketAddress(), containerClass= RouteSelector}
-----

public class RouteSelector{
...
	private void resetNextInetSocketAddress(Proxy proxy) throws IOException{
	...
		... address.urlHost();
	...
	}
...
}

public class Address{
...
	public String urlHost(){
	...
		... url().host();
	...
	}
...
}


----------------------------------
84. OurMessageChain{ address.url().port(), degree= 2, category= LOW, containerMethod= resetNextInetSocketAddress(), containerClass= RouteSelector}
-----

public class RouteSelector{
...
	private void resetNextInetSocketAddress(Proxy proxy) throws IOException{
	...
		... address.urlPort();
	...
	}
...
}

public class Address{
...
	public int urlPort(){
	...
		... url().port();
	...
	}
...
}


----------------------------------
85. OurMessageChain{ address.dns().lookup(socketHost), degree= 2, category= LOW, containerMethod= resetNextInetSocketAddress(), containerClass= RouteSelector}
-----

public class RouteSelector{
...
	private void resetNextInetSocketAddress(Proxy proxy) throws IOException{
	...
		... address.dnsLookup();
	...
	}
...
}

public class Address{
...
	public List<InetAddress> dnsLookup(){
	...
		... dns().lookup();
	...
	}
...
}


----------------------------------
86. OurMessageChain{ networkResponse.newBuilder().request(userRequest), degree= 2, category= LOW, containerMethod= intercept(), containerClass= BridgeInterceptor}
-----

public class BridgeInterceptor{
...
	public Response intercept(Chain chain) throws IOException{
	...
		... networkResponse.newBuilderRequest();
	...
	}
...
}

public class Response{
...
	public void newBuilderRequest(){
	...
		... newBuilder().request();
	...
	}
...
}


----------------------------------
87. OurMessageChain{ networkResponse.body().source(), degree= 2, category= LOW, containerMethod= intercept(), containerClass= BridgeInterceptor}
-----

public class BridgeInterceptor{
...
	public Response intercept(Chain chain) throws IOException{
	...
		... networkResponse.bodySource();
	...
	}
...
}

public class Response{
...
	public BufferedSource bodySource(){
	...
		... body().source();
	...
	}
...
}


----------------------------------
88. OurMessageChain{ realChain.eventListener().requestHeadersStart(realChain.call()), degree= 2, category= LOW, containerMethod= intercept(), containerClass= CallServerInterceptor}
-----

public class CallServerInterceptor{
...
	public Response intercept(Chain chain) throws IOException{
	...
		... realChain.eventListenerRequestHeadersStart();
	...
	}
...
}

public class RealInterceptorChain{
...
	public void eventListenerRequestHeadersStart(){
	...
		... eventListener().requestHeadersStart();
	...
	}
...
}


----------------------------------
89. OurMessageChain{ realChain.eventListener().requestHeadersEnd(realChain.call(), request), degree= 2, category= LOW, containerMethod= intercept(), containerClass= CallServerInterceptor}
-----

public class CallServerInterceptor{
...
	public Response intercept(Chain chain) throws IOException{
	...
		... realChain.eventListenerRequestHeadersEnd();
	...
	}
...
}

public class RealInterceptorChain{
...
	public void eventListenerRequestHeadersEnd(){
	...
		... eventListener().requestHeadersEnd();
	...
	}
...
}


----------------------------------
90. OurMessageChain{ realChain.eventListener().responseHeadersStart(realChain.call()), degree= 2, category= LOW, containerMethod= intercept(), containerClass= CallServerInterceptor}
-----

public class CallServerInterceptor{
...
	public Response intercept(Chain chain) throws IOException{
	...
		... realChain.eventListenerResponseHeadersStart();
	...
	}
...
}

public class RealInterceptorChain{
...
	public void eventListenerResponseHeadersStart(){
	...
		... eventListener().responseHeadersStart();
	...
	}
...
}


----------------------------------
91. OurMessageChain{ realChain.eventListener().requestBodyStart(realChain.call()), degree= 2, category= LOW, containerMethod= intercept(), containerClass= CallServerInterceptor}
-----

public class CallServerInterceptor{
...
	public Response intercept(Chain chain) throws IOException{
	...
		... realChain.eventListenerRequestBodyStart();
	...
	}
...
}

public class RealInterceptorChain{
...
	public void eventListenerRequestBodyStart(){
	...
		... eventListener().requestBodyStart();
	...
	}
...
}


----------------------------------
92. OurMessageChain{ request.body().contentLength(), degree= 2, category= LOW, containerMethod= intercept(), containerClass= CallServerInterceptor}
-----

public class CallServerInterceptor{
...
	public Response intercept(Chain chain) throws IOException{
	...
		... request.bodyContentLength();
	...
	}
...
}

public class Request{
...
	public long bodyContentLength(){
	...
		... body().contentLength();
	...
	}
...
}


----------------------------------
93. OurMessageChain{ request.body().writeTo(bufferedRequestBody), degree= 2, category= LOW, containerMethod= intercept(), containerClass= CallServerInterceptor}
-----

public class CallServerInterceptor{
...
	public Response intercept(Chain chain) throws IOException{
	...
		... request.bodyWriteTo();
	...
	}
...
}

public class Request{
...
	public void bodyWriteTo(){
	...
		... body().writeTo();
	...
	}
...
}


----------------------------------
94. OurMessageChain{ realChain.eventListener().requestBodyEnd(realChain.call(), requestBodyOut.successfulCount), degree= 2, category= LOW, containerMethod= intercept(), containerClass= CallServerInterceptor}
-----

public class CallServerInterceptor{
...
	public Response intercept(Chain chain) throws IOException{
	...
		... realChain.eventListenerRequestBodyEnd();
	...
	}
...
}

public class RealInterceptorChain{
...
	public void eventListenerRequestBodyEnd(){
	...
		... eventListener().requestBodyEnd();
	...
	}
...
}


----------------------------------
95. OurMessageChain{ realChain.eventListener().responseHeadersStart(realChain.call()), degree= 2, category= LOW, containerMethod= intercept(), containerClass= CallServerInterceptor}
-----

public class CallServerInterceptor{
...
	public Response intercept(Chain chain) throws IOException{
	...
		... realChain.eventListenerResponseHeadersStart();
	...
	}
...
}

public class RealInterceptorChain{
...
	public void eventListenerResponseHeadersStart(){
	...
		... eventListener().responseHeadersStart();
	...
	}
...
}


----------------------------------
96. OurMessageChain{ realChain.eventListener().responseHeadersEnd(realChain.call(), response), degree= 2, category= LOW, containerMethod= intercept(), containerClass= CallServerInterceptor}
-----

public class CallServerInterceptor{
...
	public Response intercept(Chain chain) throws IOException{
	...
		... realChain.eventListenerResponseHeadersEnd();
	...
	}
...
}

public class RealInterceptorChain{
...
	public void eventListenerResponseHeadersEnd(){
	...
		... eventListener().responseHeadersEnd();
	...
	}
...
}


----------------------------------
97. OurMessageChain{ response.body().contentLength(), degree= 2, category= LOW, containerMethod= intercept(), containerClass= CallServerInterceptor}
-----

public class CallServerInterceptor{
...
	public Response intercept(Chain chain) throws IOException{
	...
		... response.bodyContentLength();
	...
	}
...
}

public class Response{
...
	public long bodyContentLength(){
	...
		... body().contentLength();
	...
	}
...
}


----------------------------------
98. OurMessageChain{ response.body().contentLength(), degree= 2, category= LOW, containerMethod= intercept(), containerClass= CallServerInterceptor}
-----

public class CallServerInterceptor{
...
	public Response intercept(Chain chain) throws IOException{
	...
		... response.bodyContentLength();
	...
	}
...
}

public class Response{
...
	public long bodyContentLength(){
	...
		... body().contentLength();
	...
	}
...
}


----------------------------------
99. OurMessageChain{ client.proxyAuthenticator().authenticate(route, userResponse), degree= 2, category= LOW, containerMethod= followUpRequest(), containerClass= RetryAndFollowUpInterceptor}
-----

public class RetryAndFollowUpInterceptor{
...
	private Request followUpRequest(Response userResponse, Route route) throws IOException{
	...
		... client.proxyAuthenticatorAuthenticate();
	...
	}
...
}

public class OkHttpClient{
...
	public Request proxyAuthenticatorAuthenticate(){
	...
		... proxyAuthenticator().authenticate();
	...
	}
...
}


----------------------------------
100. OurMessageChain{ client.authenticator().authenticate(route, userResponse), degree= 2, category= LOW, containerMethod= followUpRequest(), containerClass= RetryAndFollowUpInterceptor}
-----

public class RetryAndFollowUpInterceptor{
...
	private Request followUpRequest(Response userResponse, Route route) throws IOException{
	...
		... client.authenticatorAuthenticate();
	...
	}
...
}

public class OkHttpClient{
...
	public Request authenticatorAuthenticate(){
	...
		... authenticator().authenticate();
	...
	}
...
}


----------------------------------
101. OurMessageChain{ url.scheme().equals(userResponse.request().url().scheme()), degree= 2, category= LOW, containerMethod= followUpRequest(), containerClass= RetryAndFollowUpInterceptor}
-----

public class RetryAndFollowUpInterceptor{
...
	private Request followUpRequest(Response userResponse, Route route) throws IOException{
	...
		... url.schemeEquals();
	...
	}
...
}

public class HttpUrl{
...
	public void schemeEquals(){
	...
		... scheme().equals();
	...
	}
...
}


----------------------------------
102. OurMessageChain{ url.host().equals(followUp.host()), degree= 2, category= LOW, containerMethod= sameConnection(), containerClass= RetryAndFollowUpInterceptor}
-----

public class RetryAndFollowUpInterceptor{
...
	private boolean sameConnection(Response response, HttpUrl followUp){
	...
		... url.hostEquals();
	...
	}
...
}

public class HttpUrl{
...
	public void hostEquals(){
	...
		... host().equals();
	...
	}
...
}


----------------------------------
103. OurMessageChain{ url.scheme().equals(followUp.scheme()), degree= 2, category= LOW, containerMethod= sameConnection(), containerClass= RetryAndFollowUpInterceptor}
-----

public class RetryAndFollowUpInterceptor{
...
	private boolean sameConnection(Response response, HttpUrl followUp){
	...
		... url.schemeEquals();
	...
	}
...
}

public class HttpUrl{
...
	public void schemeEquals(){
	...
		... scheme().equals();
	...
	}
...
}


----------------------------------
104. OurMessageChain{ stream.readTimeout().timeout(chain.readTimeoutMillis(), TimeUnit.MILLISECONDS), degree= 2, category= LOW, containerMethod= writeRequestHeaders(), containerClass= Http2Codec}
-----

public class Http2Codec{
...
	public void writeRequestHeaders(Request request) throws IOException{
	...
		... stream.readTimeoutTimeout();
	...
	}
...
}

public class Http2Stream{
...
	public void readTimeoutTimeout(){
	...
		... readTimeout().timeout();
	...
	}
...
}


----------------------------------
105. OurMessageChain{ stream.writeTimeout().timeout(chain.writeTimeoutMillis(), TimeUnit.MILLISECONDS), degree= 2, category= LOW, containerMethod= writeRequestHeaders(), containerClass= Http2Codec}
-----

public class Http2Codec{
...
	public void writeRequestHeaders(Request request) throws IOException{
	...
		... stream.writeTimeoutTimeout();
	...
	}
...
}

public class Http2Stream{
...
	public void writeTimeoutTimeout(){
	...
		... writeTimeout().timeout();
	...
	}
...
}


----------------------------------
106. OurMessageChain{ stream.getSink().close(), degree= 2, category= LOW, containerMethod= finishRequest(), containerClass= Http2Codec}
-----

public class Http2Codec{
...
	public void finishRequest() throws IOException{
	...
		... stream.sinkClose();
	...
	}
...
}

public class Http2Stream{
...
	public void sinkClose(){
	...
		... getSink().close();
	...
	}
...
}


----------------------------------
107. OurMessageChain{ streamAllocation.connection().newWebSocketStreams(streamAllocation), degree= 2, category= LOW, containerMethod= onResponse(), containerClass= RealWebSocket}
-----

public class RealWebSocket{
...
	public void onResponse(Call call, Response response){
	...
		... streamAllocation.connectionNewWebSocketStreams();
	...
	}
...
}

public class StreamAllocation{
...
	public RealWebSocket.Streams connectionNewWebSocketStreams(){
	...
		... connection().newWebSocketStreams();
	...
	}
...
}


----------------------------------
108. OurMessageChain{ type.type().equals("multipart"), degree= 2, category= LOW, containerMethod= setType(), containerClass= MultipartBody}
-----

public class MultipartBody{
...
	public Builder setType(MediaType type){
	...
		... type.typeEquals();
	...
	}
...
}

public class MediaType{
...
	public void typeEquals(){
	...
		... type().equals();
	...
	}
...
}


----------------------------------
109. OurMessageChain{ client.eventListenerFactory().create(call), degree= 2, category= LOW, containerMethod= newRealCall(), containerClass= RealCall}
-----

public class RealCall{
...
	static RealCall newRealCall(OkHttpClient client, Request originalRequest, boolean forWebSocket){
	...
		... client.eventListenerFactoryCreate();
	...
	}
...
}

public class OkHttpClient{
...
	public void eventListenerFactoryCreate(){
	...
		... eventListenerFactory().create();
	...
	}
...
}


----------------------------------
110. OurMessageChain{ client.dispatcher().finished(this), degree= 2, category= LOW, containerMethod= execute(), containerClass= RealCall}
-----

public class RealCall{
...
	public Response execute() throws IOException{
	...
		... client.dispatcherFinished();
	...
	}
...
}

public class OkHttpClient{
...
	public void dispatcherFinished(){
	...
		... dispatcher().finished();
	...
	}
...
}


----------------------------------
111. OurMessageChain{ client.dispatcher().executed(this), degree= 2, category= LOW, containerMethod= execute(), containerClass= RealCall}
-----

public class RealCall{
...
	public Response execute() throws IOException{
	...
		... client.dispatcherExecuted();
	...
	}
...
}

public class OkHttpClient{
...
	public void dispatcherExecuted(){
	...
		... dispatcher().executed();
	...
	}
...
}


----------------------------------
112. OurMessageChain{ client.dispatcher().enqueue(new AsyncCall(responseCallback)), degree= 2, category= LOW, containerMethod= enqueue(), containerClass= RealCall}
-----

public class RealCall{
...
	public void enqueue(Callback responseCallback){
	...
		... client.dispatcherEnqueue();
	...
	}
...
}

public class OkHttpClient{
...
	public void dispatcherEnqueue(){
	...
		... dispatcher().enqueue();
	...
	}
...
}


----------------------------------
113. OurMessageChain{ originalRequest.url().host(), degree= 2, category= LOW, containerMethod= host(), containerClass= RealCall}
-----

public class RealCall{
...
	String host(){
	...
		... originalRequest.urlHost();
	...
	}
...
}

public class Request{
...
	public String urlHost(){
	...
		... url().host();
	...
	}
...
}


----------------------------------
114. OurMessageChain{ client.dispatcher().finished(this), degree= 2, category= LOW, containerMethod= execute(), containerClass= RealCall}
-----

public class RealCall{
...
	protected void execute(){
	...
		... client.dispatcherFinished();
	...
	}
...
}

public class OkHttpClient{
...
	public void dispatcherFinished(){
	...
		... dispatcher().finished();
	...
	}
...
}


----------------------------------
115. OurMessageChain{ originalRequest.url().redact(), degree= 2, category= LOW, containerMethod= redactedUrl(), containerClass= RealCall}
-----

public class RealCall{
...
	String redactedUrl(){
	...
		... originalRequest.urlRedact();
	...
	}
...
}

public class Request{
...
	public String urlRedact(){
	...
		... url().redact();
	...
	}
...
}


----------------------------------
116. OurMessageChain{ installedCache.directory().equals(directory), degree= 2, category= LOW, containerMethod= isEquivalent(), containerClass= AndroidShimResponseCache}
-----

public class AndroidShimResponseCache{
...
	public boolean isEquivalent(File directory, long maxSize){
	...
		... installedCache.directoryEquals();
	...
	}
...
}

public class Cache{
...
	public void directoryEquals(){
	...
		... directory().equals();
	...
	}
...
}


----------------------------------
117. OurMessageChain{ response.request().isHttps(), degree= 2, category= LOW, containerMethod= createJavaCacheResponse(), containerClass= JavaApiConverter}
-----

public class JavaApiConverter{
...
	public static CacheResponse createJavaCacheResponse(final Response response){
	...
		... response.requestIsHttps();
	...
	}
...
}

public class Response{
...
	public boolean requestIsHttps(){
	...
		... request().isHttps();
	...
	}
...
}


----------------------------------
118. OurMessageChain{ handshake.cipherSuite().javaName(), degree= 2, category= LOW, containerMethod= createJavaCacheResponse(), containerClass= JavaApiConverter}
-----

public class JavaApiConverter{
...
	public static CacheResponse createJavaCacheResponse(final Response response){
	...
		... handshake.cipherSuiteJavaName();
	...
	}
...
}

public class Handshake{
...
	public String cipherSuiteJavaName(){
	...
		... cipherSuite().javaName();
	...
	}
...
}


----------------------------------
119. OurMessageChain{ response.headers().size(), degree= 2, category= LOW, containerMethod= getHeaderFieldKey(), containerClass= JavaApiConverter}
-----

public class JavaApiConverter{
...
	public String getHeaderFieldKey(int position){
	...
		... response.headersSize();
	...
	}
...
}

public class Response{
...
	public void headersSize(){
	...
		... headers().size();
	...
	}
...
}


----------------------------------
120. OurMessageChain{ response.headers().name(position - 1), degree= 2, category= LOW, containerMethod= getHeaderFieldKey(), containerClass= JavaApiConverter}
-----

public class JavaApiConverter{
...
	public String getHeaderFieldKey(int position){
	...
		... response.headersName();
	...
	}
...
}

public class Response{
...
	public void headersName(){
	...
		... headers().name();
	...
	}
...
}


----------------------------------
121. OurMessageChain{ response.headers().size(), degree= 2, category= LOW, containerMethod= getHeaderField(), containerClass= JavaApiConverter}
-----

public class JavaApiConverter{
...
	public String getHeaderField(int position){
	...
		... response.headersSize();
	...
	}
...
}

public class Response{
...
	public void headersSize(){
	...
		... headers().size();
	...
	}
...
}


----------------------------------
122. OurMessageChain{ response.headers().value(position - 1), degree= 2, category= LOW, containerMethod= getHeaderField(), containerClass= JavaApiConverter}
-----

public class JavaApiConverter{
...
	public String getHeaderField(int position){
	...
		... response.headersValue();
	...
	}
...
}

public class Response{
...
	public void headersValue(){
	...
		... headers().value();
	...
	}
...
}


----------------------------------
123. OurMessageChain{ response.headers().get(fieldName), degree= 2, category= LOW, containerMethod= getHeaderField(), containerClass= JavaApiConverter}
-----

public class JavaApiConverter{
...
	public String getHeaderField(String fieldName){
	...
		... response.headers();
	...
	}
...
}

public class Response{
...
	public void headers(){
	...
		... headers().get();
	...
	}
...
}


----------------------------------
124. OurMessageChain{ client.newCall(okRequest).execute(), degree= 2, category= LOW, containerMethod= execute(), containerClass= OkApacheClient}
-----

public class OkApacheClient{
...
	public HttpResponse execute(HttpHost host, HttpRequest request, HttpContext context) throws IOException{
	...
		... client.newCallExecute();
	...
	}
...
}

public class OkHttpClient{
...
	public Response newCallExecute(){
	...
		... newCall(okRequest).execute();
	...
	}
...
}


----------------------------------
125. OurMessageChain{ client.newCall(cacheRequest).execute(), degree= 2, category= LOW, containerMethod= executeRequest(), containerClass= DnsOverHttps}
-----

public class DnsOverHttps{
...
	private Response executeRequest(Request request) throws IOException{
	...
		... client.newCallExecute();
	...
	}
...
}

public class OkHttpClient{
...
	public Response newCallExecute(){
	...
		... newCall(cacheRequest).execute();
	...
	}
...
}


----------------------------------
126. OurMessageChain{ client.newCall(request).execute(), degree= 2, category= LOW, containerMethod= executeRequest(), containerClass= DnsOverHttps}
-----

public class DnsOverHttps{
...
	private Response executeRequest(Request request) throws IOException{
	...
		... client.newCallExecute();
	...
	}
...
}

public class OkHttpClient{
...
	public Response newCallExecute(){
	...
		... newCall(request).execute();
	...
	}
...
}


----------------------------------
127. OurMessageChain{ body.source().readByteString(), degree= 2, category= LOW, containerMethod= readResponse(), containerClass= DnsOverHttps}
-----

public class DnsOverHttps{
...
	private List<InetAddress> readResponse(String hostname, Response response) throws Exception{
	...
		... body.sourceReadByteString();
	...
	}
...
}

public class ResponseBody{
...
	public void sourceReadByteString(){
	...
		... source().readByteString();
	...
	}
...
}


----------------------------------
128. OurMessageChain{ signedBy.certificate.getSubjectX500Principal(), degree= 2, category= LOW, containerMethod= build(), containerClass= HeldCertificate}
-----

public class HeldCertificate{
...
	public HeldCertificate build(){
	...
		... signedBy.certificateSubjectX500Principal();
	...
	}
...
}

public class HeldCertificate{
...
	public void certificateSubjectX500Principal(){
	...
		... certificate.getSubjectX500Principal();
	...
	}
...
}


----------------------------------
129. OurMessageChain{ handshake.cipherSuite().javaName(), degree= 2, category= LOW, containerMethod= getCipherSuite(), containerClass= DelegatingHttpsURLConnection}
-----

public class DelegatingHttpsURLConnection{
...
	public String getCipherSuite(){
	...
		... handshake.cipherSuiteJavaName();
	...
	}
...
}

public class Handshake{
...
	public String cipherSuiteJavaName(){
	...
		... cipherSuite().javaName();
	...
	}
...
}


----------------------------------
130. OurMessageChain{ response.body().byteStream(), degree= 2, category= LOW, containerMethod= getErrorStream(), containerClass= OkHttpURLConnection}
-----

public class OkHttpURLConnection{
...
	public InputStream getErrorStream(){
	...
		... response.bodyByteStream();
	...
	}
...
}

public class Response{
...
	public InputStream bodyByteStream(){
	...
		... body().byteStream();
	...
	}
...
}


----------------------------------
131. OurMessageChain{ response.networkResponse().code(), degree= 2, category= LOW, containerMethod= responseSourceHeader(), containerClass= OkHttpURLConnection}
-----

public class OkHttpURLConnection{
...
	private static String responseSourceHeader(Response response){
	...
		... response.networkResponseCode();
	...
	}
...
}

public class Response{
...
	public int networkResponseCode(){
	...
		... networkResponse().code();
	...
	}
...
}


----------------------------------
132. OurMessageChain{ response.body().byteStream(), degree= 2, category= LOW, containerMethod= getInputStream(), containerClass= OkHttpURLConnection}
-----

public class OkHttpURLConnection{
...
	public InputStream getInputStream() throws IOException{
	...
		... response.bodyByteStream();
	...
	}
...
}

public class Response{
...
	public InputStream bodyByteStream(){
	...
		... body().byteStream();
	...
	}
...
}


----------------------------------
133. OurMessageChain{ client.proxy().address(), degree= 2, category= LOW, containerMethod= getPermission(), containerClass= OkHttpURLConnection}
-----

public class OkHttpURLConnection{
...
	public Permission getPermission() throws IOException{
	...
		... client.proxyAddress();
	...
	}
...
}

public class OkHttpClient{
...
	public void proxyAddress(){
	...
		... proxy().address();
	...
	}
...
}


----------------------------------
134. OurMessageChain{ requestBody.timeout().timeout(client.writeTimeoutMillis(), TimeUnit.MILLISECONDS), degree= 2, category= LOW, containerMethod= buildCall(), containerClass= OkHttpURLConnection}
-----

public class OkHttpURLConnection{
...
	private Call buildCall() throws IOException{
	...
		... requestBody.timeoutTimeout();
	...
	}
...
}

public class OutputStreamRequestBody{
...
	public void timeoutTimeout(){
	...
		... timeout().timeout();
	...
	}
...
}


----------------------------------
135. OurMessageChain{ call.request().body(), degree= 2, category= LOW, containerMethod= getResponse(), containerClass= OkHttpURLConnection}
-----

public class OkHttpURLConnection{
...
	private Response getResponse(boolean networkResponseOnError) throws IOException{
	...
		... call.requestBody();
	...
	}
...
}

public class Call{
...
	public RequestBody requestBody(){
	...
		... request().body();
	...
	}
...
}


----------------------------------
136. OurMessageChain{ requestBody.outputStream().close(), degree= 2, category= LOW, containerMethod= getResponse(), containerClass= OkHttpURLConnection}
-----

public class OkHttpURLConnection{
...
	private Response getResponse(boolean networkResponseOnError) throws IOException{
	...
		... requestBody.outputStreamClose();
	...
	}
...
}

public class OutputStreamRequestBody{
...
	public void outputStreamClose(){
	...
		... outputStream().close();
	...
	}
...
}


----------------------------------
137. OurMessageChain{ client.newCall(request).execute(), degree= 2, category= LOW, containerMethod= fetch(), containerClass= Crawler}
-----

public class Crawler{
...
	public void fetch(HttpUrl url) throws IOException{
	...
		... client.newCallExecute();
	...
	}
...
}

public class OkHttpClient{
...
	public Response newCallExecute(){
	...
		... newCall(request).execute();
	...
	}
...
}


----------------------------------
138. OurMessageChain{ response.networkResponse().code(), degree= 2, category= LOW, containerMethod= fetch(), containerClass= Crawler}
-----

public class Crawler{
...
	public void fetch(HttpUrl url) throws IOException{
	...
		... response.networkResponseCode();
	...
	}
...
}

public class Response{
...
	public int networkResponseCode(){
	...
		... networkResponse().code();
	...
	}
...
}


----------------------------------
139. OurMessageChain{ mediaType.subtype().equalsIgnoreCase("html"), degree= 2, category= LOW, containerMethod= fetch(), containerClass= Crawler}
-----

public class Crawler{
...
	public void fetch(HttpUrl url) throws IOException{
	...
		... mediaType.subtypeEqualsIgnoreCase();
	...
	}
...
}

public class MediaType{
...
	public void subtypeEqualsIgnoreCase(){
	...
		... subtype().equalsIgnoreCase();
	...
	}
...
}


----------------------------------
140. OurMessageChain{ client.newCall(request).execute(), degree= 2, category= LOW, containerMethod= run(), containerClass= GetExample}
-----

public class GetExample{
...
	String run(String url) throws IOException{
	...
		... client.newCallExecute();
	...
	}
...
}

public class OkHttpClient{
...
	public Response newCallExecute(){
	...
		... newCall(request).execute();
	...
	}
...
}


----------------------------------
141. OurMessageChain{ response.body().string(), degree= 2, category= LOW, containerMethod= run(), containerClass= GetExample}
-----

public class GetExample{
...
	String run(String url) throws IOException{
	...
		... response.bodyString();
	...
	}
...
}

public class Response{
...
	public String bodyString(){
	...
		... body().string();
	...
	}
...
}


----------------------------------
142. OurMessageChain{ client.newCall(request).execute(), degree= 2, category= LOW, containerMethod= post(), containerClass= PostExample}
-----

public class PostExample{
...
	String post(String url, String json) throws IOException{
	...
		... client.newCallExecute();
	...
	}
...
}

public class OkHttpClient{
...
	public Response newCallExecute(){
	...
		... newCall(request).execute();
	...
	}
...
}


----------------------------------
143. OurMessageChain{ response.body().string(), degree= 2, category= LOW, containerMethod= post(), containerClass= PostExample}
-----

public class PostExample{
...
	String post(String url, String json) throws IOException{
	...
		... response.bodyString();
	...
	}
...
}

public class Response{
...
	public String bodyString(){
	...
		... body().string();
	...
	}
...
}


----------------------------------
144. OurMessageChain{ client.newCall(request).execute(), degree= 2, category= LOW, containerMethod= run(), containerClass= AccessHeaders}
-----

public class AccessHeaders{
...
	public void run() throws Exception{
	...
		... client.newCallExecute();
	...
	}
...
}

public class OkHttpClient{
...
	public Response newCallExecute(){
	...
		... newCall(request).execute();
	...
	}
...
}


----------------------------------
145. OurMessageChain{ client.newCall(request).enqueue(new Callback() {

    @Override
    public void onFailure(Call call, IOException e) {
        e.printStackTrace();
    }

    @Override
    public void onResponse(Call call, Response response) throws IOException {
        try (ResponseBody responseBody = response.body()) {
            if (!response.isSuccessful())
                throw new IOException("Unexpected code " + response);
            Headers responseHeaders = response.headers();
            for (int i = 0, size = responseHeaders.size(); i < size; i++) {
                System.out.println(responseHeaders.name(i) + ": " + responseHeaders.value(i));
            }
            System.out.println(responseBody.string());
        }
    }
}), degree= 2, category= LOW, containerMethod= run(), containerClass= AsynchronousGet}
-----

public class AsynchronousGet{
...
	public void run() throws Exception{
	...
		... client.newCallEnqueue();
	...
	}
...
}

public class OkHttpClient{
...
	public void newCallEnqueue(){
	...
		... newCall(request).enqueue();
	...
	}
...
}


----------------------------------
146. OurMessageChain{ client.newCall(request).execute(), degree= 2, category= LOW, containerMethod= run(), containerClass= Authenticate}
-----

public class Authenticate{
...
	public void run() throws Exception{
	...
		... client.newCallExecute();
	...
	}
...
}

public class OkHttpClient{
...
	public Response newCallExecute(){
	...
		... newCall(request).execute();
	...
	}
...
}


----------------------------------
147. OurMessageChain{ client.newCall(request).execute(), degree= 2, category= LOW, containerMethod= run(), containerClass= CacheResponse}
-----

public class CacheResponse{
...
	public void run() throws Exception{
	...
		... client.newCallExecute();
	...
	}
...
}

public class OkHttpClient{
...
	public Response newCallExecute(){
	...
		... newCall(request).execute();
	...
	}
...
}


----------------------------------
148. OurMessageChain{ response1.body().string(), degree= 2, category= LOW, containerMethod= run(), containerClass= CacheResponse}
-----

public class CacheResponse{
...
	public void run() throws Exception{
	...
		... response1.bodyString();
	...
	}
...
}

public class Response{
...
	public String bodyString(){
	...
		... body().string();
	...
	}
...
}


----------------------------------
149. OurMessageChain{ client.newCall(request).execute(), degree= 2, category= LOW, containerMethod= run(), containerClass= CacheResponse}
-----

public class CacheResponse{
...
	public void run() throws Exception{
	...
		... client.newCallExecute();
	...
	}
...
}

public class OkHttpClient{
...
	public Response newCallExecute(){
	...
		... newCall(request).execute();
	...
	}
...
}


----------------------------------
150. OurMessageChain{ response2.body().string(), degree= 2, category= LOW, containerMethod= run(), containerClass= CacheResponse}
-----

public class CacheResponse{
...
	public void run() throws Exception{
	...
		... response2.bodyString();
	...
	}
...
}

public class Response{
...
	public String bodyString(){
	...
		... body().string();
	...
	}
...
}


----------------------------------
151. OurMessageChain{ client.newCall(request).execute(), degree= 2, category= LOW, containerMethod= run(), containerClass= CertificatePinning}
-----

public class CertificatePinning{
...
	public void run() throws Exception{
	...
		... client.newCallExecute();
	...
	}
...
}

public class OkHttpClient{
...
	public Response newCallExecute(){
	...
		... newCall(request).execute();
	...
	}
...
}


----------------------------------
152. OurMessageChain{ response.handshake().peerCertificates(), degree= 2, category= LOW, containerMethod= run(), containerClass= CertificatePinning}
-----

public class CertificatePinning{
...
	public void run() throws Exception{
	...
		... response.handshakePeerCertificates();
	...
	}
...
}

public class Response{
...
	public List<Certificate> handshakePeerCertificates(){
	...
		... handshake().peerCertificates();
	...
	}
...
}


----------------------------------
153. OurMessageChain{ client.newCall(request).execute(), degree= 2, category= LOW, containerMethod= run(), containerClass= CheckHandshake}
-----

public class CheckHandshake{
...
	public void run() throws Exception{
	...
		... client.newCallExecute();
	...
	}
...
}

public class OkHttpClient{
...
	public Response newCallExecute(){
	...
		... newCall(request).execute();
	...
	}
...
}


----------------------------------
154. OurMessageChain{ client.newCall(request).execute(), degree= 2, category= LOW, containerMethod= run(), containerClass= ConfigureTimeouts}
-----

public class ConfigureTimeouts{
...
	public void run() throws Exception{
	...
		... client.newCallExecute();
	...
	}
...
}

public class OkHttpClient{
...
	public Response newCallExecute(){
	...
		... newCall(request).execute();
	...
	}
...
}


----------------------------------
155. OurMessageChain{ client.newCall(request).execute(), degree= 2, category= LOW, containerMethod= run(), containerClass= CustomCipherSuites}
-----

public class CustomCipherSuites{
...
	public void run() throws Exception{
	...
		... client.newCallExecute();
	...
	}
...
}

public class OkHttpClient{
...
	public Response newCallExecute(){
	...
		... newCall(request).execute();
	...
	}
...
}


----------------------------------
156. OurMessageChain{ client.newCall(request).execute(), degree= 2, category= LOW, containerMethod= run(), containerClass= CustomTrust}
-----

public class CustomTrust{
...
	public void run() throws Exception{
	...
		... client.newCallExecute();
	...
	}
...
}

public class OkHttpClient{
...
	public Response newCallExecute(){
	...
		... newCall(request).execute();
	...
	}
...
}


----------------------------------
157. OurMessageChain{ client.newCall(request).execute(), degree= 2, category= LOW, containerMethod= run(), containerClass= LoggingInterceptors}
-----

public class LoggingInterceptors{
...
	public void run() throws Exception{
	...
		... client.newCallExecute();
	...
	}
...
}

public class OkHttpClient{
...
	public Response newCallExecute(){
	...
		... newCall(request).execute();
	...
	}
...
}


----------------------------------
158. OurMessageChain{ response.body().close(), degree= 2, category= LOW, containerMethod= run(), containerClass= LoggingInterceptors}
-----

public class LoggingInterceptors{
...
	public void run() throws Exception{
	...
		... response.bodyClose();
	...
	}
...
}

public class Response{
...
	public void bodyClose(){
	...
		... body().close();
	...
	}
...
}


----------------------------------
159. OurMessageChain{ client.newCall(request).execute(), degree= 2, category= LOW, containerMethod= run(), containerClass= ParseResponseWithMoshi}
-----

public class ParseResponseWithMoshi{
...
	public void run() throws Exception{
	...
		... client.newCallExecute();
	...
	}
...
}

public class OkHttpClient{
...
	public Response newCallExecute(){
	...
		... newCall(request).execute();
	...
	}
...
}


----------------------------------
160. OurMessageChain{ client1.newCall(request).execute(), degree= 2, category= LOW, containerMethod= run(), containerClass= PerCallSettings}
-----

public class PerCallSettings{
...
	public void run() throws Exception{
	...
		... client1.newCallExecute();
	...
	}
...
}

public class OkHttpClient{
...
	public Response newCallExecute(){
	...
		... newCall(request).execute();
	...
	}
...
}


----------------------------------
161. OurMessageChain{ client2.newCall(request).execute(), degree= 2, category= LOW, containerMethod= run(), containerClass= PerCallSettings}
-----

public class PerCallSettings{
...
	public void run() throws Exception{
	...
		... client2.newCallExecute();
	...
	}
...
}

public class OkHttpClient{
...
	public Response newCallExecute(){
	...
		... newCall(request).execute();
	...
	}
...
}


----------------------------------
162. OurMessageChain{ client.newCall(request).execute(), degree= 2, category= LOW, containerMethod= run(), containerClass= PostFile}
-----

public class PostFile{
...
	public void run() throws Exception{
	...
		... client.newCallExecute();
	...
	}
...
}

public class OkHttpClient{
...
	public Response newCallExecute(){
	...
		... newCall(request).execute();
	...
	}
...
}


----------------------------------
163. OurMessageChain{ client.newCall(request).execute(), degree= 2, category= LOW, containerMethod= run(), containerClass= PostForm}
-----

public class PostForm{
...
	public void run() throws Exception{
	...
		... client.newCallExecute();
	...
	}
...
}

public class OkHttpClient{
...
	public Response newCallExecute(){
	...
		... newCall(request).execute();
	...
	}
...
}


----------------------------------
164. OurMessageChain{ client.newCall(request).execute(), degree= 2, category= LOW, containerMethod= run(), containerClass= PostMultipart}
-----

public class PostMultipart{
...
	public void run() throws Exception{
	...
		... client.newCallExecute();
	...
	}
...
}

public class OkHttpClient{
...
	public Response newCallExecute(){
	...
		... newCall(request).execute();
	...
	}
...
}


----------------------------------
165. OurMessageChain{ client.newCall(request).execute(), degree= 2, category= LOW, containerMethod= run(), containerClass= PostStreaming}
-----

public class PostStreaming{
...
	public void run() throws Exception{
	...
		... client.newCallExecute();
	...
	}
...
}

public class OkHttpClient{
...
	public Response newCallExecute(){
	...
		... newCall(request).execute();
	...
	}
...
}


----------------------------------
166. OurMessageChain{ client.newCall(request).execute(), degree= 2, category= LOW, containerMethod= run(), containerClass= PostStreamingWithPipe}
-----

public class PostStreamingWithPipe{
...
	public void run() throws Exception{
	...
		... client.newCallExecute();
	...
	}
...
}

public class OkHttpClient{
...
	public Response newCallExecute(){
	...
		... newCall(request).execute();
	...
	}
...
}


----------------------------------
167. OurMessageChain{ client.newCall(request).execute(), degree= 2, category= LOW, containerMethod= run(), containerClass= PostString}
-----

public class PostString{
...
	public void run() throws Exception{
	...
		... client.newCallExecute();
	...
	}
...
}

public class OkHttpClient{
...
	public Response newCallExecute(){
	...
		... newCall(request).execute();
	...
	}
...
}


----------------------------------
168. OurMessageChain{ body.source().readByteString(), degree= 2, category= LOW, containerMethod= onResponse(), containerClass= PrintEvents}
-----

public class PrintEvents{
...
	public void onResponse(Call call, Response response) throws IOException{
	...
		... body.sourceReadByteString();
	...
	}
...
}

public class ResponseBody{
...
	public void sourceReadByteString(){
	...
		... source().readByteString();
	...
	}
...
}


----------------------------------
169. OurMessageChain{ body.source().readByteString(), degree= 2, category= LOW, containerMethod= onResponse(), containerClass= PrintEvents}
-----

public class PrintEvents{
...
	public void onResponse(Call call, Response response) throws IOException{
	...
		... body.sourceReadByteString();
	...
	}
...
}

public class ResponseBody{
...
	public void sourceReadByteString(){
	...
		... source().readByteString();
	...
	}
...
}


----------------------------------
170. OurMessageChain{ client.newCall(washingtonPostRequest).enqueue(new Callback() {

    @Override
    public void onFailure(Call call, IOException e) {
    }

    @Override
    public void onResponse(Call call, Response response) throws IOException {
        try (ResponseBody body = response.body()) {
            // Consume and discard the response body.
            body.source().readByteString();
        }
    }
}), degree= 2, category= LOW, containerMethod= run(), containerClass= PrintEvents}
-----

public class PrintEvents{
...
	public void run() throws Exception{
	...
		... client.newCallEnqueue();
	...
	}
...
}

public class OkHttpClient{
...
	public void newCallEnqueue(){
	...
		... newCall(washingtonPostRequest).enqueue();
	...
	}
...
}


----------------------------------
171. OurMessageChain{ client.newCall(newYorkTimesRequest).enqueue(new Callback() {

    @Override
    public void onFailure(Call call, IOException e) {
    }

    @Override
    public void onResponse(Call call, Response response) throws IOException {
        try (ResponseBody body = response.body()) {
            // Consume and discard the response body.
            body.source().readByteString();
        }
    }
}), degree= 2, category= LOW, containerMethod= run(), containerClass= PrintEvents}
-----

public class PrintEvents{
...
	public void run() throws Exception{
	...
		... client.newCallEnqueue();
	...
	}
...
}

public class OkHttpClient{
...
	public void newCallEnqueue(){
	...
		... newCall(newYorkTimesRequest).enqueue();
	...
	}
...
}


----------------------------------
172. OurMessageChain{ client.newCall(request).execute(), degree= 2, category= LOW, containerMethod= run(), containerClass= PrintEventsNonConcurrent}
-----

public class PrintEventsNonConcurrent{
...
	public void run() throws Exception{
	...
		... client.newCallExecute();
	...
	}
...
}

public class OkHttpClient{
...
	public Response newCallExecute(){
	...
		... newCall(request).execute();
	...
	}
...
}


----------------------------------
173. OurMessageChain{ client.newCall(request).execute(), degree= 2, category= LOW, containerMethod= run(), containerClass= PrintEventsNonConcurrent}
-----

public class PrintEventsNonConcurrent{
...
	public void run() throws Exception{
	...
		... client.newCallExecute();
	...
	}
...
}

public class OkHttpClient{
...
	public Response newCallExecute(){
	...
		... newCall(request).execute();
	...
	}
...
}


----------------------------------
174. OurMessageChain{ client.newCall(request).execute(), degree= 2, category= LOW, containerMethod= run(), containerClass= Progress}
-----

public class Progress{
...
	public void run() throws Exception{
	...
		... client.newCallExecute();
	...
	}
...
}

public class OkHttpClient{
...
	public Response newCallExecute(){
	...
		... newCall(request).execute();
	...
	}
...
}


----------------------------------
175. OurMessageChain{ client.newCall(request).execute(), degree= 2, category= LOW, containerMethod= run(), containerClass= RequestBodyCompression}
-----

public class RequestBodyCompression{
...
	public void run() throws Exception{
	...
		... client.newCallExecute();
	...
	}
...
}

public class OkHttpClient{
...
	public Response newCallExecute(){
	...
		... newCall(request).execute();
	...
	}
...
}


----------------------------------
176. OurMessageChain{ clientForCall.newCall(request).execute(), degree= 2, category= LOW, containerMethod= run(), containerClass= RewriteResponseCacheControl}
-----

public class RewriteResponseCacheControl{
...
	public void run() throws Exception{
	...
		... clientForCall.newCallExecute();
	...
	}
...
}

public class OkHttpClient{
...
	public Response newCallExecute(){
	...
		... newCall(request).execute();
	...
	}
...
}


----------------------------------
177. OurMessageChain{ client.newCall(request).execute(), degree= 2, category= LOW, containerMethod= run(), containerClass= SynchronousGet}
-----

public class SynchronousGet{
...
	public void run() throws Exception{
	...
		... client.newCallExecute();
	...
	}
...
}

public class OkHttpClient{
...
	public Response newCallExecute(){
	...
		... newCall(request).execute();
	...
	}
...
}


----------------------------------
178. OurMessageChain{ client.newCall(request).execute(), degree= 2, category= LOW, containerMethod= main(), containerClass= OkHttpContributors}
-----

public class OkHttpContributors{
...
	public static void main(String... args) throws Exception{
	...
		... client.newCallExecute();
	...
	}
...
}

public class OkHttpClient{
...
	public Response newCallExecute(){
	...
		... newCall(request).execute();
	...
	}
...
}


----------------------------------
179. OurMessageChain{ client.newCall(request).execute(), degree= 2, category= LOW, containerMethod= run(), containerClass= ClientAndServer}
-----

public class ClientAndServer{
...
	public void run() throws Exception{
	...
		... client.newCallExecute();
	...
	}
...
}

public class OkHttpClient{
...
	public Response newCallExecute(){
	...
		... newCall(request).execute();
	...
	}
...
}

