There are 21 Message Chains in project d2010
Following are the Message Chains and their respective refactoring suggestion:

----------------------------------
1. OurMessageChain{ url.addParameter(RpcConstants.LAZY_CONNECT_INITIAL_STATE_KEY, Boolean.FALSE).addParameter(Constants.RECONNECT_KEY, Boolean.FALSE).addParameter(Constants.SEND_RECONNECT_KEY, Boolean.TRUE.toString()).addParameter("warning", Boolean.TRUE.toString()).addParameter(LazyConnectExchangeClient.REQUEST_WITH_WARNING_KEY, true).addParameter("_client_memo", "referencecounthandler.replacewithlazyclient"), degree= 6, category= HIGH, containerMethod= replaceWithLazyClient(), containerClass= ReferenceCountExchangeClient}
-----

public class ReferenceCountExchangeClient{
...
	private LazyConnectExchangeClient replaceWithLazyClient(){
	...
		... url.addParameterAddParameterAddParameterAddParameterAddParameterAddParameter();
	...
	}
...
}

public class URL{
...
	public URL addParameterAddParameterAddParameterAddParameterAddParameterAddParameter(){
	...
		... addParameter(RpcConstants.LAZY_CONNECT_INITIAL_STATE_KEY, Boolean.FALSE).addParameterAddParameterAddParameterAddParameterAddParameter();
	...
	}
...
}

public class URL{
...
	public URL addParameterAddParameterAddParameterAddParameterAddParameter(){
	...
		... addParameter(Constants.RECONNECT_KEY, Boolean.FALSE).addParameterAddParameterAddParameterAddParameter();
	...
	}
...
}

public class URL{
...
	public URL addParameterAddParameterAddParameterAddParameter(){
	...
		... addParameter(Constants.SEND_RECONNECT_KEY, Boolean.TRUE.toString()).addParameterAddParameterAddParameter();
	...
	}
...
}

public class URL{
...
	public URL addParameterAddParameterAddParameter(){
	...
		... addParameter("warning", Boolean.TRUE.toString()).addParameterAddParameter();
	...
	}
...
}

public class URL{
...
	public URL addParameterAddParameter(){
	...
		... addParameter(LazyConnectExchangeClient.REQUEST_WITH_WARNING_KEY, true).addParameter();
	...
	}
...
}


----------------------------------
2. OurMessageChain{ page.getRows().get(0).size(), degree= 3, category= MEDIUM, containerMethod= doPost(), containerClass= PageServlet}
-----

public class PageServlet{
...
	protected final void doPost(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException{
	...
		... page.rowsSize();
	...
	}
...
}


----------------------------------
3. OurMessageChain{ log.getLogLevel().equals(expectedLevel), degree= 2, category= LOW, containerMethod= findLevelWithThreadName(), containerClass= LogUtil}
-----

public class LogUtil{
...
	public static int findLevelWithThreadName(Level expectedLevel, String threadName){
	...
		... log.logLevelEquals();
	...
	}
...
}

public class Log{
...
	public void logLevelEquals(){
	...
		... getLogLevel().equals();
	...
	}
...
}


----------------------------------
4. OurMessageChain{ log.getLogThread().equals(threadName), degree= 2, category= LOW, containerMethod= findLevelWithThreadName(), containerClass= LogUtil}
-----

public class LogUtil{
...
	public static int findLevelWithThreadName(Level expectedLevel, String threadName){
	...
		... log.logThreadEquals();
	...
	}
...
}

public class Log{
...
	public void logThreadEquals(){
	...
		... getLogThread().equals();
	...
	}
...
}


----------------------------------
5. OurMessageChain{ config.getAddress().length(), degree= 2, category= LOW, containerMethod= loadRegistries(), containerClass= AbstractReferenceConfig}
-----

public class AbstractReferenceConfig{
...
	protected List<URL> loadRegistries(){
	...
		... config.addressLength();
	...
	}
...
}

public class RegistryConfig{
...
	public void addressLength(){
	...
		... getAddress().length();
	...
	}
...
}


----------------------------------
6. OurMessageChain{ url.getPath().length(), degree= 2, category= LOW, containerMethod= createProxy(), containerClass= ReferenceConfig}
-----

public class ReferenceConfig{
...
	private T createProxy(Map<String, String> map){
	...
		... url.pathLength();
	...
	}
...
}

public class URL{
...
	public void pathLength(){
	...
		... getPath().length();
	...
	}
...
}


----------------------------------
7. OurMessageChain{ argument.getType().length(), degree= 2, category= LOW, containerMethod= doExportUrls(), containerClass= ServiceConfig}
-----

public class ServiceConfig{
...
	private void doExportUrls(){
	...
		... argument.typeLength();
	...
	}
...
}

public class ArgumentConfig{
...
	public void typeLength(){
	...
		... getType().length();
	...
	}
...
}


----------------------------------
8. OurMessageChain{ status.getLevel().toString(), degree= 2, category= LOW, containerMethod= handle(), containerClass= StatusPageHandler}
-----

public class StatusPageHandler{
...
	public Page handle(URL url){
	...
		... status.levelToString();
	...
	}
...
}

public class Status{
...
	public void levelToString(){
	...
		... getLevel().toString();
	...
	}
...
}


----------------------------------
9. OurMessageChain{ page.getRows().size(), degree= 2, category= LOW, containerMethod= doPost(), containerClass= PageServlet}
-----

public class PageServlet{
...
	protected final void doPost(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException{
	...
		... page.rowsSize();
	...
	}
...
}

public class Page{
...
	public void rowsSize(){
	...
		... getRows().size();
	...
	}
...
}


----------------------------------
10. OurMessageChain{ statistics.getUrl().addParameters(MonitorService.TIMESTAMP, timestamp, MonitorService.SUCCESS, String.valueOf(success), MonitorService.FAILURE, String.valueOf(failure), MonitorService.INPUT, String.valueOf(input), MonitorService.OUTPUT, String.valueOf(output), MonitorService.ELAPSED, String.valueOf(elapsed), MonitorService.CONCURRENT, String.valueOf(concurrent), MonitorService.MAX_INPUT, String.valueOf(maxInput), MonitorService.MAX_OUTPUT, String.valueOf(maxOutput), MonitorService.MAX_ELAPSED, String.valueOf(maxElapsed), MonitorService.MAX_CONCURRENT, String.valueOf(maxConcurrent)), degree= 2, category= LOW, containerMethod= send(), containerClass= DubboMonitor}
-----

public class DubboMonitor{
...
	public void send(){
	...
		... statistics.urlAddParameters();
	...
	}
...
}

public class Statistics{
...
	public URL urlAddParameters(){
	...
		... getUrl().addParameters();
	...
	}
...
}


----------------------------------
11. OurMessageChain{ url.getPath().length(), degree= 2, category= LOW, containerMethod= toInvokers(), containerClass= RegistryDirectory}
-----

public class RegistryDirectory{
...
	private Map<String, Invoker<T>> toInvokers(List<URL> urls){
	...
		... url.pathLength();
	...
	}
...
}

public class URL{
...
	public void pathLength(){
	...
		... getPath().length();
	...
	}
...
}


----------------------------------
12. OurMessageChain{ url.removeParameters("dynamic", "enabled").toFullString(), degree= 2, category= LOW, containerMethod= export(), containerClass= RegistryProtocol}
-----

public class RegistryProtocol{
...
	public Exporter<T> export(final Invoker<T> invoker) throws RpcException{
	...
		... url.removeParametersToFullString();
	...
	}
...
}

public class URL{
...
	public String removeParametersToFullString(){
	...
		... removeParameters("dynamic", "enabled").toFullString();
	...
	}
...
}


----------------------------------
13. OurMessageChain{ registryUrl.setProtocol(protocol).removeParameter(Constants.REGISTRY_KEY), degree= 2, category= LOW, containerMethod= export(), containerClass= RegistryProtocol}
-----

public class RegistryProtocol{
...
	public Exporter<T> export(final Invoker<T> invoker) throws RpcException{
	...
		... registryUrl.setProtocolRemoveParameter();
	...
	}
...
}

public class URL{
...
	public URL setProtocolRemoveParameter(){
	...
		... setProtocol(protocol).removeParameter();
	...
	}
...
}


----------------------------------
14. OurMessageChain{ url.getIp().equals(host), degree= 2, category= LOW, containerMethod= getExchangeChannel(), containerClass= ExchangeServerPeer}
-----

public class ExchangeServerPeer{
...
	public ExchangeChannel getExchangeChannel(InetSocketAddress remoteAddress){
	...
		... url.ipEquals();
	...
	}
...
}

public class URL{
...
	public void ipEquals(){
	...
		... getIp().equals();
	...
	}
...
}


----------------------------------
15. OurMessageChain{ url.getIp().equals(host), degree= 2, category= LOW, containerMethod= getChannel(), containerClass= ServerPeer}
-----

public class ServerPeer{
...
	public Channel getChannel(InetSocketAddress remoteAddress){
	...
		... url.ipEquals();
	...
	}
...
}

public class URL{
...
	public void ipEquals(){
	...
		... getIp().equals();
	...
	}
...
}


----------------------------------
16. OurMessageChain{ inv.getAttachments().get(Constants.PATH_KEY), degree= 2, category= LOW, containerMethod= reply(), containerClass= DubboProtocol}
-----

public class DubboProtocol{
...
	public Object reply(ExchangeChannel channel, Object message) throws RemotingException{
	...
		... inv.attachments();
	...
	}
...
}

public class Invocation{
...
	public void attachments(){
	...
		... getAttachments().get();
	...
	}
...
}


----------------------------------
17. OurMessageChain{ inv.getAttachments().get(Constants.PATH_KEY), degree= 2, category= LOW, containerMethod= reply(), containerClass= DubboProtocol}
-----

public class DubboProtocol{
...
	public Object reply(ExchangeChannel channel, Object message) throws RemotingException{
	...
		... inv.attachments();
	...
	}
...
}

public class Invocation{
...
	public void attachments(){
	...
		... getAttachments().get();
	...
	}
...
}


----------------------------------
18. OurMessageChain{ inv.getAttachments().get(RpcConstants.CALLBACK_SERVICE_KEY), degree= 2, category= LOW, containerMethod= reply(), containerClass= DubboProtocol}
-----

public class DubboProtocol{
...
	public Object reply(ExchangeChannel channel, Object message) throws RemotingException{
	...
		... inv.attachments();
	...
	}
...
}

public class Invocation{
...
	public void attachments(){
	...
		... getAttachments().get();
	...
	}
...
}


----------------------------------
19. OurMessageChain{ inv.getMethodName().equals(method), degree= 2, category= LOW, containerMethod= reply(), containerClass= DubboProtocol}
-----

public class DubboProtocol{
...
	public Object reply(ExchangeChannel channel, Object message) throws RemotingException{
	...
		... inv.methodNameEquals();
	...
	}
...
}

public class Invocation{
...
	public void methodNameEquals(){
	...
		... getMethodName().equals();
	...
	}
...
}


----------------------------------
20. OurMessageChain{ inv.getMethodName().equals(methodsStr), degree= 2, category= LOW, containerMethod= reply(), containerClass= DubboProtocol}
-----

public class DubboProtocol{
...
	public Object reply(ExchangeChannel channel, Object message) throws RemotingException{
	...
		... inv.methodNameEquals();
	...
	}
...
}

public class Invocation{
...
	public void methodNameEquals(){
	...
		... getMethodName().equals();
	...
	}
...
}


----------------------------------
21. OurMessageChain{ s.getExchangeChannels().size(), degree= 2, category= LOW, containerMethod= handle(), containerClass= ServersPageHandler}
-----

public class ServersPageHandler{
...
	public Page handle(URL url){
	...
		... s.exchangeChannelsSize();
	...
	}
...
}

public class ExchangeServer{
...
	public void exchangeChannelsSize(){
	...
		... getExchangeChannels().size();
	...
	}
...
}

