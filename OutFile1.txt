There are 9 Message Chains in this project
Following are the Message Chains and their respective refactoring suggestion:

----------------------------------
1. OurMessageChain{ b.getC(a).getD().runD(), degree= 3, category= MEDIUM, containerMethod= runA(), containerClass= A}
-----

public class A{
...
	protected void runA(String a){
	...
		... b.cDRunD();
	...
	}
...
}

public class B{
...
	public void cDRunD(){
	...
		... getC(a).dRunD();
	...
	}
...
}

public class C{
...
	public void dRunD(){
	...
		... getD().runD();
	...
	}
...
}


----------------------------------
2. OurMessageChain{ a.getB().runB(), degree= 2, category= LOW, containerMethod= runD(), containerClass= D}
-----

public class D{
...
	void runD(){
	...
		... a.bRunB();
	...
	}
...
}

public class A{
...
	public void bRunB(){
	...
		... getB().runB();
	...
	}
...
}


----------------------------------
3. OurMessageChain{ currMethod.getName().equals(getSkimmedMethodName(chainElement)), degree= 2, category= LOW, containerMethod= isInnerMethod(), containerClass= MsgChainWorker}
-----

public class MsgChainWorker{
...
	private boolean isInnerMethod(OurClass currClass, String chainElement){
	...
		... currMethod.nameEquals();
	...
	}
...
}

public class OurMethod{
...
	public void nameEquals(){
	...
		... getName().equals();
	...
	}
...
}


----------------------------------
4. OurMessageChain{ currMethod.getName().equals(getSkimmedMethodName(chainElement)), degree= 2, category= LOW, containerMethod= getTypeFromMethod(), containerClass= MsgChainWorker}
-----

public class MsgChainWorker{
...
	private OurClass getTypeFromMethod(String chainElement, OurClass currClass){
	...
		... currMethod.nameEquals();
	...
	}
...
}

public class OurMethod{
...
	public void nameEquals(){
	...
		... getName().equals();
	...
	}
...
}


----------------------------------
5. OurMessageChain{ currMethod.getName().equals(getSkimmedMethodName(chainElement)), degree= 2, category= LOW, containerMethod= getTypeStringFromMethod(), containerClass= MsgChainWorker}
-----

public class MsgChainWorker{
...
	private String getTypeStringFromMethod(String chainElement, OurClass currClass){
	...
		... currMethod.nameEquals();
	...
	}
...
}

public class OurMethod{
...
	public void nameEquals(){
	...
		... getName().equals();
	...
	}
...
}


----------------------------------
6. OurMessageChain{ aClass.getName().equals(vd.getTypeAsString()), degree= 2, category= LOW, containerMethod= visit(), containerClass= InstanceFieldCollector}
-----

public class InstanceFieldCollector{
...
	public void visit(FieldDeclaration fd, List<OurVariable> collector){
	...
		... aClass.nameEquals();
	...
	}
...
}

public class OurClass{
...
	public void nameEquals(){
	...
		... getName().equals();
	...
	}
...
}


----------------------------------
7. OurMessageChain{ currMethod.getParentClass().getFields(), degree= 2, category= LOW, containerMethod= isVariable(), containerClass= MethodCallCollector}
-----

public class MethodCallCollector{
...
	private boolean isVariable(String scope){
	...
		... currMethod.parentClassFields();
	...
	}
...
}

public class OurMethod{
...
	public List<OurVariable> parentClassFields(){
	...
		... getParentClass().getFields();
	...
	}
...
}


----------------------------------
8. OurMessageChain{ clazz.getName().equals(type), degree= 2, category= LOW, containerMethod= findType(), containerClass= MethodNameCollector}
-----

public class MethodNameCollector{
...
	private OurClass findType(MethodDeclaration md){
	...
		... clazz.nameEquals();
	...
	}
...
}

public class OurClass{
...
	public void nameEquals(){
	...
		... getName().equals();
	...
	}
...
}


----------------------------------
9. OurMessageChain{ aClass.getName().equals(vd.getTypeAsString()), degree= 2, category= LOW, containerMethod= visit(), containerClass= VariableCollector}
-----

public class VariableCollector{
...
	public void visit(VariableDeclarator vd, List<OurVariable> collector){
	...
		... aClass.nameEquals();
	...
	}
...
}

public class OurClass{
...
	public void nameEquals(){
	...
		... getName().equals();
	...
	}
...
}

