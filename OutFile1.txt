There are 16 Message Chains in project d207
Following are the Message Chains and their respective refactoring suggestion:

----------------------------------
1. OurMessageChain{ statistics.getUrl().addParameter(MonitorService.SUCCESS, success).addParameter(MonitorService.FAILURE, failure).addParameter(MonitorService.INPUT, input).addParameter(MonitorService.OUTPUT, output).addParameter(MonitorService.ELAPSED, elapsed).addParameter(MonitorService.CONCURRENT, concurrent).addParameter(MonitorService.MAX_INPUT, maxInput).addParameter(MonitorService.MAX_OUTPUT, maxOutput).addParameter(MonitorService.MAX_ELAPSED, maxElapsed).addParameter(MonitorService.MAX_CONCURRENT, maxConcurrent), degree= 11, category= HIGH, containerMethod= send(), containerClass= DubboMonitor}
-----

public class DubboMonitor{
...
	public void send(){
	...
		... statistics.urlAddParameterAddParameterAddParameterAddParameterAddParameterAddParameterAddParameterAddParameterAddParameterAddParameter();
	...
	}
...
}

public class Statistics{
...
	public URL urlAddParameterAddParameterAddParameterAddParameterAddParameterAddParameterAddParameterAddParameterAddParameterAddParameter(){
	...
		... getUrl().addParameterAddParameterAddParameterAddParameterAddParameterAddParameterAddParameterAddParameterAddParameterAddParameter();
	...
	}
...
}

public class URL{
...
	public URL addParameterAddParameterAddParameterAddParameterAddParameterAddParameterAddParameterAddParameterAddParameterAddParameter(){
	...
		... addParameter(MonitorService.SUCCESS, success).addParameterAddParameterAddParameterAddParameterAddParameterAddParameterAddParameterAddParameterAddParameter();
	...
	}
...
}

public class URL{
...
	public URL addParameterAddParameterAddParameterAddParameterAddParameterAddParameterAddParameterAddParameterAddParameter(){
	...
		... addParameter(MonitorService.FAILURE, failure).addParameterAddParameterAddParameterAddParameterAddParameterAddParameterAddParameterAddParameter();
	...
	}
...
}

public class URL{
...
	public URL addParameterAddParameterAddParameterAddParameterAddParameterAddParameterAddParameterAddParameter(){
	...
		... addParameter(MonitorService.INPUT, input).addParameterAddParameterAddParameterAddParameterAddParameterAddParameterAddParameter();
	...
	}
...
}

public class URL{
...
	public URL addParameterAddParameterAddParameterAddParameterAddParameterAddParameterAddParameter(){
	...
		... addParameter(MonitorService.OUTPUT, output).addParameterAddParameterAddParameterAddParameterAddParameterAddParameter();
	...
	}
...
}

public class URL{
...
	public URL addParameterAddParameterAddParameterAddParameterAddParameterAddParameter(){
	...
		... addParameter(MonitorService.ELAPSED, elapsed).addParameterAddParameterAddParameterAddParameterAddParameter();
	...
	}
...
}

public class URL{
...
	public URL addParameterAddParameterAddParameterAddParameterAddParameter(){
	...
		... addParameter(MonitorService.CONCURRENT, concurrent).addParameterAddParameterAddParameterAddParameter();
	...
	}
...
}

public class URL{
...
	public URL addParameterAddParameterAddParameterAddParameter(){
	...
		... addParameter(MonitorService.MAX_INPUT, maxInput).addParameterAddParameterAddParameter();
	...
	}
...
}

public class URL{
...
	public URL addParameterAddParameterAddParameter(){
	...
		... addParameter(MonitorService.MAX_OUTPUT, maxOutput).addParameterAddParameter();
	...
	}
...
}

public class URL{
...
	public URL addParameterAddParameter(){
	...
		... addParameter(MonitorService.MAX_ELAPSED, maxElapsed).addParameter();
	...
	}
...
}


----------------------------------
2. OurMessageChain{ url.addParameter("enabled", String.valueOf(ready)).addParameter(Constants.MONITOR_KEY, convertMonitor(url.getParameter(Constants.MONITOR_KEY), registryURL)).toFullString(), degree= 3, category= MEDIUM, containerMethod= doExport(), containerClass= ServiceConfig}
-----

public class ServiceConfig{
...
	private void doExport(boolean ready){
	...
		... url.addParameterAddParameterToFullString();
	...
	}
...
}

public class URL{
...
	public String addParameterAddParameterToFullString(){
	...
		... addParameter("enabled", String.valueOf(ready)).addParameterToFullString();
	...
	}
...
}

public class URL{
...
	public String addParameterToFullString(){
	...
		... addParameter(Constants.MONITOR_KEY, convertMonitor(url.getParameter(Constants.MONITOR_KEY), registryURL)).toFullString();
	...
	}
...
}


----------------------------------
3. OurMessageChain{ config.getAddress().length(), degree= 2, category= LOW, containerMethod= loadRegistries(), containerClass= AbstractReferenceConfig}
-----

public class AbstractReferenceConfig{
...
	protected List<URL> loadRegistries(){
	...
		... config.addressLength();
	...
	}
...
}

public class RegistryConfig{
...
	public void addressLength(){
	...
		... getAddress().length();
	...
	}
...
}


----------------------------------
4. OurMessageChain{ url.getPath().length(), degree= 2, category= LOW, containerMethod= createProxy(), containerClass= ReferenceConfig}
-----

public class ReferenceConfig{
...
	private T createProxy(Map<String, String> map){
	...
		... url.pathLength();
	...
	}
...
}

public class URL{
...
	public void pathLength(){
	...
		... getPath().length();
	...
	}
...
}


----------------------------------
5. OurMessageChain{ url.addParameter("enabled", "true").toFullString(), degree= 2, category= LOW, containerMethod= ready(), containerClass= ServiceConfig}
-----

public class ServiceConfig{
...
	protected synchronized void ready(){
	...
		... url.addParameterToFullString();
	...
	}
...
}

public class URL{
...
	public String addParameterToFullString(){
	...
		... addParameter("enabled", "true").toFullString();
	...
	}
...
}


----------------------------------
6. OurMessageChain{ argument.getType().length(), degree= 2, category= LOW, containerMethod= doExportUrls(), containerClass= ServiceConfig}
-----

public class ServiceConfig{
...
	private void doExportUrls(){
	...
		... argument.typeLength();
	...
	}
...
}

public class ArgumentConfig{
...
	public void typeLength(){
	...
		... getType().length();
	...
	}
...
}


----------------------------------
7. OurMessageChain{ url.getPath().length(), degree= 2, category= LOW, containerMethod= toInvokers(), containerClass= RegistryDirectory}
-----

public class RegistryDirectory{
...
	private Map<String, Invoker<T>> toInvokers(List<URL> urls){
	...
		... url.pathLength();
	...
	}
...
}

public class URL{
...
	public void pathLength(){
	...
		... getPath().length();
	...
	}
...
}


----------------------------------
8. OurMessageChain{ url.removeParameters("dynamic", "enabled").toFullString(), degree= 2, category= LOW, containerMethod= export(), containerClass= RegistryProtocol}
-----

public class RegistryProtocol{
...
	public Exporter<T> export(final Invoker<T> invoker) throws RpcException{
	...
		... url.removeParametersToFullString();
	...
	}
...
}

public class URL{
...
	public String removeParametersToFullString(){
	...
		... removeParameters("dynamic", "enabled").toFullString();
	...
	}
...
}


----------------------------------
9. OurMessageChain{ registryUrl.setProtocol(protocol).removeParameter(Constants.REGISTRY_KEY), degree= 2, category= LOW, containerMethod= export(), containerClass= RegistryProtocol}
-----

public class RegistryProtocol{
...
	public Exporter<T> export(final Invoker<T> invoker) throws RpcException{
	...
		... registryUrl.setProtocolRemoveParameter();
	...
	}
...
}

public class URL{
...
	public URL setProtocolRemoveParameter(){
	...
		... setProtocol(protocol).removeParameter();
	...
	}
...
}


----------------------------------
10. OurMessageChain{ url.getHost().equals(host), degree= 2, category= LOW, containerMethod= getExchangeChannel(), containerClass= ExchangeServerPeer}
-----

public class ExchangeServerPeer{
...
	public ExchangeChannel getExchangeChannel(InetSocketAddress remoteAddress){
	...
		... url.hostEquals();
	...
	}
...
}

public class URL{
...
	public void hostEquals(){
	...
		... getHost().equals();
	...
	}
...
}


----------------------------------
11. OurMessageChain{ url.getHost().equals(host), degree= 2, category= LOW, containerMethod= getChannel(), containerClass= ServerPeer}
-----

public class ServerPeer{
...
	public Channel getChannel(InetSocketAddress remoteAddress){
	...
		... url.hostEquals();
	...
	}
...
}

public class URL{
...
	public void hostEquals(){
	...
		... getHost().equals();
	...
	}
...
}


----------------------------------
12. OurMessageChain{ inv.getAttachments().get(Constants.PATH_KEY), degree= 2, category= LOW, containerMethod= reply(), containerClass= DubboProtocol}
-----

public class DubboProtocol{
...
	public Object reply(ExchangeChannel channel, Object message) throws RemotingException{
	...
		... inv.attachments();
	...
	}
...
}

public class Invocation{
...
	public void attachments(){
	...
		... getAttachments().get();
	...
	}
...
}


----------------------------------
13. OurMessageChain{ inv.getAttachments().get(Constants.PATH_KEY), degree= 2, category= LOW, containerMethod= reply(), containerClass= DubboProtocol}
-----

public class DubboProtocol{
...
	public Object reply(ExchangeChannel channel, Object message) throws RemotingException{
	...
		... inv.attachments();
	...
	}
...
}

public class Invocation{
...
	public void attachments(){
	...
		... getAttachments().get();
	...
	}
...
}


----------------------------------
14. OurMessageChain{ inv.getAttachments().get(RpcConstants.CALLBACK_SERVICE_KEY), degree= 2, category= LOW, containerMethod= reply(), containerClass= DubboProtocol}
-----

public class DubboProtocol{
...
	public Object reply(ExchangeChannel channel, Object message) throws RemotingException{
	...
		... inv.attachments();
	...
	}
...
}

public class Invocation{
...
	public void attachments(){
	...
		... getAttachments().get();
	...
	}
...
}


----------------------------------
15. OurMessageChain{ inv.getMethodName().equals(method), degree= 2, category= LOW, containerMethod= reply(), containerClass= DubboProtocol}
-----

public class DubboProtocol{
...
	public Object reply(ExchangeChannel channel, Object message) throws RemotingException{
	...
		... inv.methodNameEquals();
	...
	}
...
}

public class Invocation{
...
	public void methodNameEquals(){
	...
		... getMethodName().equals();
	...
	}
...
}


----------------------------------
16. OurMessageChain{ inv.getMethodName().equals(methodsStr), degree= 2, category= LOW, containerMethod= reply(), containerClass= DubboProtocol}
-----

public class DubboProtocol{
...
	public Object reply(ExchangeChannel channel, Object message) throws RemotingException{
	...
		... inv.methodNameEquals();
	...
	}
...
}

public class Invocation{
...
	public void methodNameEquals(){
	...
		... getMethodName().equals();
	...
	}
...
}

