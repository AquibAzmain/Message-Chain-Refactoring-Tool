There are 136 Message Chains in project net3
Following are the Message Chains and their respective refactoring suggestion:

----------------------------------
1. OurMessageChain{ f.sync().getChannel().getCloseFuture().sync(), degree= 4, category= HIGH, containerMethod= main(), containerClass= ObjectEchoClient}
-----

public class ObjectEchoClient{
...
	public static void main(String[] args) throws Exception{
	...
		... f.syncChannelCloseFutureSync();
	...
	}
...
}

public class ChannelFuture{
...
	public ChannelFuture syncChannelCloseFutureSync(){
	...
		... sync().channelCloseFutureSync();
	...
	}
...
}

public class ChannelFuture{
...
	public ChannelFuture channelCloseFutureSync(){
	...
		... getChannel().closeFutureSync();
	...
	}
...
}

public class Channel{
...
	public ChannelFuture closeFutureSync(){
	...
		... getCloseFuture().sync();
	...
	}
...
}


----------------------------------
2. OurMessageChain{ ctx.getChannel().getConfig().getBufferFactory().getBuffer(uncompressed.order(), out, 0, z.next_out_index), degree= 4, category= HIGH, containerMethod= encode(), containerClass= ZlibEncoder}
-----

public class ZlibEncoder{
...
	protected Object encode(ChannelHandlerContext ctx, Channel channel, Object msg) throws Exception{
	...
		... ctx.channelConfigBufferFactoryBuffer();
	...
	}
...
}

public class ChannelHandlerContext{
...
	public ChannelBuffer channelConfigBufferFactoryBuffer(){
	...
		... getChannel().configBufferFactoryBuffer();
	...
	}
...
}

public class Channel{
...
	public ChannelBuffer configBufferFactoryBuffer(){
	...
		... getConfig().bufferFactoryBuffer();
	...
	}
...
}

public class ChannelConfig{
...
	public ChannelBuffer bufferFactoryBuffer(){
	...
		... getBufferFactory().getBuffer();
	...
	}
...
}


----------------------------------
3. OurMessageChain{ ctx.getChannel().getConfig().getBufferFactory().getBuffer(out, 0, z.next_out_index), degree= 4, category= HIGH, containerMethod= finishEncode(), containerClass= ZlibEncoder}
-----

public class ZlibEncoder{
...
	private ChannelFuture finishEncode(final ChannelHandlerContext ctx, final ChannelEvent evt){
	...
		... ctx.channelConfigBufferFactoryBuffer();
	...
	}
...
}

public class ChannelHandlerContext{
...
	public ChannelBuffer channelConfigBufferFactoryBuffer(){
	...
		... getChannel().configBufferFactoryBuffer();
	...
	}
...
}

public class Channel{
...
	public ChannelBuffer configBufferFactoryBuffer(){
	...
		... getConfig().bufferFactoryBuffer();
	...
	}
...
}

public class ChannelConfig{
...
	public ChannelBuffer bufferFactoryBuffer(){
	...
		... getBufferFactory().getBuffer();
	...
	}
...
}


----------------------------------
4. OurMessageChain{ ctx.getChannel().getConfig().getBufferFactory().getBuffer(remaining), degree= 4, category= HIGH, containerMethod= wrap(), containerClass= SslHandler}
-----

public class SslHandler{
...
	private void wrap(ChannelHandlerContext context, Channel channel) throws SSLException{
	...
		... ctx.channelConfigBufferFactoryBuffer();
	...
	}
...
}

public class ChannelHandlerContext{
...
	public ChannelBuffer channelConfigBufferFactoryBuffer(){
	...
		... getChannel().configBufferFactoryBuffer();
	...
	}
...
}

public class Channel{
...
	public ChannelBuffer configBufferFactoryBuffer(){
	...
		... getConfig().bufferFactoryBuffer();
	...
	}
...
}

public class ChannelConfig{
...
	public ChannelBuffer bufferFactoryBuffer(){
	...
		... getBufferFactory().getBuffer();
	...
	}
...
}


----------------------------------
5. OurMessageChain{ ctx.getChannel().getConfig().getBufferFactory().getBuffer(outNetBuf.remaining()), degree= 4, category= HIGH, containerMethod= wrapNonAppData(), containerClass= SslHandler}
-----

public class SslHandler{
...
	private ChannelFuture wrapNonAppData(ChannelHandlerContext ctx, Channel channel) throws SSLException{
	...
		... ctx.channelConfigBufferFactoryBuffer();
	...
	}
...
}

public class ChannelHandlerContext{
...
	public ChannelBuffer channelConfigBufferFactoryBuffer(){
	...
		... getChannel().configBufferFactoryBuffer();
	...
	}
...
}

public class Channel{
...
	public ChannelBuffer configBufferFactoryBuffer(){
	...
		... getConfig().bufferFactoryBuffer();
	...
	}
...
}

public class ChannelConfig{
...
	public ChannelBuffer bufferFactoryBuffer(){
	...
		... getBufferFactory().getBuffer();
	...
	}
...
}


----------------------------------
6. OurMessageChain{ future.getChannel().close().awaitUninterruptibly(), degree= 3, category= MEDIUM, containerMethod= bind(), containerClass= ConnectionlessBootstrap}
-----

public class ConnectionlessBootstrap{
...
	public Channel bind(final SocketAddress localAddress){
	...
		... future.channelCloseAwaitUninterruptibly();
	...
	}
...
}

public class ChannelFuture{
...
	public ChannelFuture channelCloseAwaitUninterruptibly(){
	...
		... getChannel().closeAwaitUninterruptibly();
	...
	}
...
}

public class Channel{
...
	public ChannelFuture closeAwaitUninterruptibly(){
	...
		... close().awaitUninterruptibly();
	...
	}
...
}


----------------------------------
7. OurMessageChain{ future.getChannel().close().awaitUninterruptibly(), degree= 3, category= MEDIUM, containerMethod= bind(), containerClass= ServerBootstrap}
-----

public class ServerBootstrap{
...
	public Channel bind(final SocketAddress localAddress){
	...
		... future.channelCloseAwaitUninterruptibly();
	...
	}
...
}

public class ChannelFuture{
...
	public ChannelFuture channelCloseAwaitUninterruptibly(){
	...
		... getChannel().closeAwaitUninterruptibly();
	...
	}
...
}

public class Channel{
...
	public ChannelFuture closeAwaitUninterruptibly(){
	...
		... close().awaitUninterruptibly();
	...
	}
...
}


----------------------------------
8. OurMessageChain{ serverChannel.getConfig().getPipelineFactory().getPipeline(), degree= 3, category= MEDIUM, containerMethod= connect(), containerClass= LocalClientChannelSink}
-----

public class LocalClientChannelSink{
...
	private void connect(DefaultLocalChannel channel, ChannelFuture future, LocalAddress remoteAddress){
	...
		... serverChannel.configPipelineFactoryPipeline();
	...
	}
...
}

public class DefaultLocalServerChannel{
...
	public ChannelPipeline configPipelineFactoryPipeline(){
	...
		... getConfig().pipelineFactoryPipeline();
	...
	}
...
}

public class ChannelConfig{
...
	public ChannelPipeline pipelineFactoryPipeline(){
	...
		... getPipelineFactory().getPipeline();
	...
	}
...
}


----------------------------------
9. OurMessageChain{ channel.getConfig().getPipelineFactory().getPipeline(), degree= 3, category= MEDIUM, containerMethod= run(), containerClass= OioServerSocketPipelineSink}
-----

public class OioServerSocketPipelineSink{
...
	public void run(){
	...
		... channel.configPipelineFactoryPipeline();
	...
	}
...
}


----------------------------------
10. OurMessageChain{ future.getChannel().getCloseFuture().sync(), degree= 3, category= MEDIUM, containerMethod= main(), containerClass= DiscardClient}
-----

public class DiscardClient{
...
	public static void main(String[] args) throws Exception{
	...
		... future.channelCloseFutureSync();
	...
	}
...
}

public class ChannelFuture{
...
	public ChannelFuture channelCloseFutureSync(){
	...
		... getChannel().closeFutureSync();
	...
	}
...
}

public class Channel{
...
	public ChannelFuture closeFutureSync(){
	...
		... getCloseFuture().sync();
	...
	}
...
}


----------------------------------
11. OurMessageChain{ future.getChannel().getCloseFuture().sync(), degree= 3, category= MEDIUM, containerMethod= main(), containerClass= EchoClient}
-----

public class EchoClient{
...
	public static void main(String[] args) throws Exception{
	...
		... future.channelCloseFutureSync();
	...
	}
...
}

public class ChannelFuture{
...
	public ChannelFuture channelCloseFutureSync(){
	...
		... getChannel().closeFutureSync();
	...
	}
...
}

public class Channel{
...
	public ChannelFuture closeFutureSync(){
	...
		... getCloseFuture().sync();
	...
	}
...
}


----------------------------------
12. OurMessageChain{ trailer.trailingHeaders().names().isEmpty(), degree= 3, category= MEDIUM, containerMethod= messageReceived(), containerClass= HttpSnoopServerHandler}
-----

public class HttpSnoopServerHandler{
...
	public void messageReceived(ChannelHandlerContext ctx, MessageEvent e){
	...
		... trailer.trailingHeadersNamesIsEmpty();
	...
	}
...
}

public class HttpChunkTrailer{
...
	public void trailingHeadersNamesIsEmpty(){
	...
		... trailingHeaders().namesIsEmpty();
	...
	}
...
}

public class HttpHeaders{
...
	public void namesIsEmpty(){
	...
		... names().isEmpty();
	...
	}
...
}


----------------------------------
13. OurMessageChain{ channelFuture.getChannel().close().sync(), degree= 3, category= MEDIUM, containerMethod= main(), containerClass= HttpTunnelingClientExample}
-----

public class HttpTunnelingClientExample{
...
	public static void main(String[] args) throws Exception{
	...
		... channelFuture.channelCloseSync();
	...
	}
...
}

public class ChannelFuture{
...
	public ChannelFuture channelCloseSync(){
	...
		... getChannel().closeSync();
	...
	}
...
}

public class Channel{
...
	public ChannelFuture closeSync(){
	...
		... close().sync();
	...
	}
...
}


----------------------------------
14. OurMessageChain{ channelFuture.getChannel().getCloseFuture().sync(), degree= 3, category= MEDIUM, containerMethod= main(), containerClass= LocalExample}
-----

public class LocalExample{
...
	public static void main(String[] args) throws Exception{
	...
		... channelFuture.channelCloseFutureSync();
	...
	}
...
}

public class ChannelFuture{
...
	public ChannelFuture channelCloseFutureSync(){
	...
		... getChannel().closeFutureSync();
	...
	}
...
}

public class Channel{
...
	public ChannelFuture closeFutureSync(){
	...
		... getCloseFuture().sync();
	...
	}
...
}


----------------------------------
15. OurMessageChain{ ctx.getChannel().getConfig().getBufferFactory(), degree= 3, category= MEDIUM, containerMethod= newCumulationBuffer(), containerClass= FrameDecoder}
-----

public class FrameDecoder{
...
	protected ChannelBuffer newCumulationBuffer(ChannelHandlerContext ctx, int minimumCapacity){
	...
		... ctx.channelConfigBufferFactory();
	...
	}
...
}

public class ChannelHandlerContext{
...
	public ChannelBufferFactory channelConfigBufferFactory(){
	...
		... getChannel().configBufferFactory();
	...
	}
...
}

public class Channel{
...
	public ChannelBufferFactory configBufferFactory(){
	...
		... getConfig().getBufferFactory();
	...
	}
...
}


----------------------------------
16. OurMessageChain{ ctx.getChannel().getConfig().getBufferFactory(), degree= 3, category= MEDIUM, containerMethod= unwrap(), containerClass= SslHandler}
-----

public class SslHandler{
...
	private ChannelBuffer unwrap(ChannelHandlerContext ctx, Channel channel, ChannelBuffer nettyInNetBuf, ByteBuffer nioInNetBuf, int initialNettyOutAppBufCapacity, boolean mightNeedHandshake) throws SSLException{
	...
		... ctx.channelConfigBufferFactory();
	...
	}
...
}

public class ChannelHandlerContext{
...
	public ChannelBufferFactory channelConfigBufferFactory(){
	...
		... getChannel().configBufferFactory();
	...
	}
...
}

public class Channel{
...
	public ChannelBufferFactory configBufferFactory(){
	...
		... getConfig().getBufferFactory();
	...
	}
...
}


----------------------------------
17. OurMessageChain{ ch.getConfig().setOptions(getOptions()), degree= 2, category= LOW, containerMethod= connect(), containerClass= ClientBootstrap}
-----

public class ClientBootstrap{
...
	public ChannelFuture connect(final SocketAddress remoteAddress, final SocketAddress localAddress){
	...
		... ch.configSetOptions();
	...
	}
...
}

public class Channel{
...
	public void configSetOptions(){
	...
		... getConfig().setOptions();
	...
	}
...
}


----------------------------------
18. OurMessageChain{ ch.getConfig().setOptions(getOptions()), degree= 2, category= LOW, containerMethod= bind(), containerClass= ClientBootstrap}
-----

public class ClientBootstrap{
...
	public ChannelFuture bind(final SocketAddress localAddress){
	...
		... ch.configSetOptions();
	...
	}
...
}

public class Channel{
...
	public void configSetOptions(){
	...
		... getConfig().setOptions();
	...
	}
...
}


----------------------------------
19. OurMessageChain{ ch.getConfig().setOptions(getOptions()), degree= 2, category= LOW, containerMethod= bind(), containerClass= ConnectionlessBootstrap}
-----

public class ConnectionlessBootstrap{
...
	public Channel bind(final SocketAddress localAddress){
	...
		... ch.configSetOptions();
	...
	}
...
}

public class Channel{
...
	public void configSetOptions(){
	...
		... getConfig().setOptions();
	...
	}
...
}


----------------------------------
20. OurMessageChain{ ch.getConfig().setOptions(getOptions()), degree= 2, category= LOW, containerMethod= connect(), containerClass= ConnectionlessBootstrap}
-----

public class ConnectionlessBootstrap{
...
	public ChannelFuture connect(final SocketAddress remoteAddress, final SocketAddress localAddress){
	...
		... ch.configSetOptions();
	...
	}
...
}

public class Channel{
...
	public void configSetOptions(){
	...
		... getConfig().setOptions();
	...
	}
...
}


----------------------------------
21. OurMessageChain{ buffer.toByteBuffer(index, length).asReadOnlyBuffer(), degree= 2, category= LOW, containerMethod= toByteBuffer(), containerClass= ReadOnlyChannelBuffer}
-----

public class ReadOnlyChannelBuffer{
...
	public ByteBuffer toByteBuffer(int index, int length){
	...
		... buffer.toByteBufferAsReadOnlyBuffer();
	...
	}
...
}

public class ChannelBuffer{
...
	public void toByteBufferAsReadOnlyBuffer(){
	...
		... toByteBuffer(index, length).asReadOnlyBuffer();
	...
	}
...
}


----------------------------------
22. OurMessageChain{ c.getCloseFuture().removeListener(remover), degree= 2, category= LOW, containerMethod= remove(), containerClass= DefaultChannelGroup}
-----

public class DefaultChannelGroup{
...
	public boolean remove(Object o){
	...
		... c.closeFutureRemoveListener();
	...
	}
...
}

public class Channel{
...
	public void closeFutureRemoveListener(){
	...
		... getCloseFuture().removeListener();
	...
	}
...
}


----------------------------------
23. OurMessageChain{ group.close().awaitUninterruptibly(), degree= 2, category= LOW, containerMethod= releaseExternalResources(), containerClass= DefaultLocalServerChannelFactory}
-----

public class DefaultLocalServerChannelFactory{
...
	public void releaseExternalResources(){
	...
		... group.closeAwaitUninterruptibly();
	...
	}
...
}

public class DefaultChannelGroup{
...
	public ChannelGroupFuture closeAwaitUninterruptibly(){
	...
		... close().awaitUninterruptibly();
	...
	}
...
}


----------------------------------
24. OurMessageChain{ res.getStatus().getCode(), degree= 2, category= LOW, containerMethod= messageReceived(), containerClass= HttpTunnelingClientSocketChannel}
-----

public class HttpTunnelingClientSocketChannel{
...
	public void messageReceived(ChannelHandlerContext ctx, MessageEvent e) throws Exception{
	...
		... res.statusCode();
	...
	}
...
}

public class HttpResponse{
...
	public int statusCode(){
	...
		... getStatus().getCode();
	...
	}
...
}


----------------------------------
25. OurMessageChain{ channel.connect(remoteAddress).awaitUninterruptibly(), degree= 2, category= LOW, containerMethod= service(), containerClass= HttpTunnelingServlet}
-----

public class HttpTunnelingServlet{
...
	protected void service(HttpServletRequest req, HttpServletResponse res) throws ServletException, IOException{
	...
		... channel.connectAwaitUninterruptibly();
	...
	}
...
}

public class Channel{
...
	public ChannelFuture connectAwaitUninterruptibly(){
	...
		... connect(remoteAddress).awaitUninterruptibly();
	...
	}
...
}


----------------------------------
26. OurMessageChain{ channel.getConfig().getReceiveBufferSizePredictor(), degree= 2, category= LOW, containerMethod= read(), containerClass= NioDatagramWorker}
-----

public class NioDatagramWorker{
...
	protected boolean read(final SelectionKey key){
	...
		... channel.configReceiveBufferSizePredictor();
	...
	}
...
}

public class NioDatagramChannel{
...
	public void configReceiveBufferSizePredictor(){
	...
		... getConfig().getReceiveBufferSizePredictor();
	...
	}
...
}


----------------------------------
27. OurMessageChain{ channel.getConfig().getBufferFactory(), degree= 2, category= LOW, containerMethod= read(), containerClass= NioDatagramWorker}
-----

public class NioDatagramWorker{
...
	protected boolean read(final SelectionKey key){
	...
		... channel.configBufferFactory();
	...
	}
...
}

public class NioDatagramChannel{
...
	public void configBufferFactory(){
	...
		... getConfig().getBufferFactory();
	...
	}
...
}


----------------------------------
28. OurMessageChain{ bufferAllocator.get(predictedRecvBufSize).order(bufferFactory.getDefaultOrder()), degree= 2, category= LOW, containerMethod= read(), containerClass= NioDatagramWorker}
-----

public class NioDatagramWorker{
...
	protected boolean read(final SelectionKey key){
	...
		... bufferAllocator.order();
	...
	}
...
}

public class SocketReceiveBufferAllocator{
...
	public void order(){
	...
		... get(predictedRecvBufSize).order();
	...
	}
...
}


----------------------------------
29. OurMessageChain{ channel.getDatagramChannel().disconnect(), degree= 2, category= LOW, containerMethod= disconnect(), containerClass= NioDatagramWorker}
-----

public class NioDatagramWorker{
...
	static void disconnect(NioDatagramChannel channel, ChannelFuture future){
	...
		... channel.datagramChannelDisconnect();
	...
	}
...
}

public class NioDatagramChannel{
...
	public void datagramChannelDisconnect(){
	...
		... getDatagramChannel().disconnect();
	...
	}
...
}


----------------------------------
30. OurMessageChain{ channel.getDatagramChannel().register(selector, channel.getInternalInterestOps(), channel), degree= 2, category= LOW, containerMethod= run(), containerClass= NioDatagramWorker}
-----

public class NioDatagramWorker{
...
	public void run(){
	...
		... channel.datagramChannelRegister();
	...
	}
...
}

public class NioDatagramChannel{
...
	public void datagramChannelRegister(){
	...
		... getDatagramChannel().register();
	...
	}
...
}


----------------------------------
31. OurMessageChain{ channel.getConfig().getWriteSpinCount(), degree= 2, category= LOW, containerMethod= write0(), containerClass= NioDatagramWorker}
-----

public class NioDatagramWorker{
...
	protected void write0(final AbstractNioChannel<?> channel){
	...
		... channel.configWriteSpinCount();
	...
	}
...
}

public class NioDatagramChannel{
...
	public void configWriteSpinCount(){
	...
		... getConfig().getWriteSpinCount();
	...
	}
...
}


----------------------------------
32. OurMessageChain{ channel.getConfig().getReceiveBufferSizePredictor(), degree= 2, category= LOW, containerMethod= read(), containerClass= NioWorker}
-----

public class NioWorker{
...
	protected boolean read(SelectionKey k){
	...
		... channel.configReceiveBufferSizePredictor();
	...
	}
...
}

public class NioSocketChannel{
...
	public ReceiveBufferSizePredictor configReceiveBufferSizePredictor(){
	...
		... getConfig().getReceiveBufferSizePredictor();
	...
	}
...
}


----------------------------------
33. OurMessageChain{ channel.getConfig().getBufferFactory(), degree= 2, category= LOW, containerMethod= read(), containerClass= NioWorker}
-----

public class NioWorker{
...
	protected boolean read(SelectionKey k){
	...
		... channel.configBufferFactory();
	...
	}
...
}

public class NioSocketChannel{
...
	public void configBufferFactory(){
	...
		... getConfig().getBufferFactory();
	...
	}
...
}


----------------------------------
34. OurMessageChain{ recvBufferPool.get(predictedRecvBufSize).order(bufferFactory.getDefaultOrder()), degree= 2, category= LOW, containerMethod= read(), containerClass= NioWorker}
-----

public class NioWorker{
...
	protected boolean read(SelectionKey k){
	...
		... recvBufferPool.order();
	...
	}
...
}

public class SocketReceiveBufferAllocator{
...
	public void order(){
	...
		... get(predictedRecvBufSize).order();
	...
	}
...
}


----------------------------------
35. OurMessageChain{ connectFuture.sync().getChannel(), degree= 2, category= LOW, containerMethod= main(), containerClass= FactorialClient}
-----

public class FactorialClient{
...
	public static void main(String[] args) throws Exception{
	...
		... connectFuture.syncChannel();
	...
	}
...
}

public class ChannelFuture{
...
	public Channel syncChannel(){
	...
		... sync().getChannel();
	...
	}
...
}


----------------------------------
36. OurMessageChain{ channel.getPipeline().getLast(), degree= 2, category= LOW, containerMethod= main(), containerClass= FactorialClient}
-----

public class FactorialClient{
...
	public static void main(String[] args) throws Exception{
	...
		... channel.pipelineLast();
	...
	}
...
}

public class Channel{
...
	public ChannelHandler pipelineLast(){
	...
		... getPipeline().getLast();
	...
	}
...
}


----------------------------------
37. OurMessageChain{ ch.getPipeline().get(SslHandler.class), degree= 2, category= LOW, containerMethod= messageReceived(), containerClass= HttpStaticFileServerHandler}
-----

public class HttpStaticFileServerHandler{
...
	public void messageReceived(ChannelHandlerContext ctx, MessageEvent e) throws Exception{
	...
		... ch.pipeline();
	...
	}
...
}

public class Channel{
...
	public ChannelHandler pipeline(){
	...
		... getPipeline().get();
	...
	}
...
}


----------------------------------
38. OurMessageChain{ future.sync().getChannel(), degree= 2, category= LOW, containerMethod= main(), containerClass= HttpSnoopClient}
-----

public class HttpSnoopClient{
...
	public static void main(String[] args) throws Exception{
	...
		... future.syncChannel();
	...
	}
...
}

public class ChannelFuture{
...
	public Channel syncChannel(){
	...
		... sync().getChannel();
	...
	}
...
}


----------------------------------
39. OurMessageChain{ channel.getCloseFuture().sync(), degree= 2, category= LOW, containerMethod= main(), containerClass= HttpSnoopClient}
-----

public class HttpSnoopClient{
...
	public static void main(String[] args) throws Exception{
	...
		... channel.closeFutureSync();
	...
	}
...
}

public class Channel{
...
	public ChannelFuture closeFutureSync(){
	...
		... getCloseFuture().sync();
	...
	}
...
}


----------------------------------
40. OurMessageChain{ trailer.trailingHeaders().getAll(name), degree= 2, category= LOW, containerMethod= messageReceived(), containerClass= HttpSnoopServerHandler}
-----

public class HttpSnoopServerHandler{
...
	public void messageReceived(ChannelHandlerContext ctx, MessageEvent e){
	...
		... trailer.trailingHeadersAll();
	...
	}
...
}

public class HttpChunkTrailer{
...
	public List<String> trailingHeadersAll(){
	...
		... trailingHeaders().getAll();
	...
	}
...
}


----------------------------------
41. OurMessageChain{ trailer.trailingHeaders().names(), degree= 2, category= LOW, containerMethod= messageReceived(), containerClass= HttpSnoopServerHandler}
-----

public class HttpSnoopServerHandler{
...
	public void messageReceived(ChannelHandlerContext ctx, MessageEvent e){
	...
		... trailer.trailingHeadersNames();
	...
	}
...
}

public class HttpChunkTrailer{
...
	public Set<String> trailingHeadersNames(){
	...
		... trailingHeaders().names();
	...
	}
...
}


----------------------------------
42. OurMessageChain{ channelFuture.getChannel().write(line), degree= 2, category= LOW, containerMethod= main(), containerClass= HttpTunnelingClientExample}
-----

public class HttpTunnelingClientExample{
...
	public static void main(String[] args) throws Exception{
	...
		... channelFuture.channelWrite();
	...
	}
...
}

public class ChannelFuture{
...
	public ChannelFuture channelWrite(){
	...
		... getChannel().write();
	...
	}
...
}


----------------------------------
43. OurMessageChain{ future.sync().getChannel(), degree= 2, category= LOW, containerMethod= formget(), containerClass= HttpUploadClient}
-----

public class HttpUploadClient{
...
	private static List<Entry<String, String>> formget(ClientBootstrap bootstrap, String host, int port, String get, URI uriSimple) throws Exception{
	...
		... future.syncChannel();
	...
	}
...
}

public class ChannelFuture{
...
	public Channel syncChannel(){
	...
		... sync().getChannel();
	...
	}
...
}


----------------------------------
44. OurMessageChain{ channel.getCloseFuture().sync(), degree= 2, category= LOW, containerMethod= formget(), containerClass= HttpUploadClient}
-----

public class HttpUploadClient{
...
	private static List<Entry<String, String>> formget(ClientBootstrap bootstrap, String host, int port, String get, URI uriSimple) throws Exception{
	...
		... channel.closeFutureSync();
	...
	}
...
}

public class Channel{
...
	public ChannelFuture closeFutureSync(){
	...
		... getCloseFuture().sync();
	...
	}
...
}


----------------------------------
45. OurMessageChain{ future.sync().getChannel(), degree= 2, category= LOW, containerMethod= formpost(), containerClass= HttpUploadClient}
-----

public class HttpUploadClient{
...
	private static List<InterfaceHttpData> formpost(ClientBootstrap bootstrap, String host, int port, URI uriSimple, File file, HttpDataFactory factory, List<Entry<String, String>> headers) throws Exception{
	...
		... future.syncChannel();
	...
	}
...
}

public class ChannelFuture{
...
	public Channel syncChannel(){
	...
		... sync().getChannel();
	...
	}
...
}


----------------------------------
46. OurMessageChain{ channel.write(bodyRequestEncoder).sync(), degree= 2, category= LOW, containerMethod= formpost(), containerClass= HttpUploadClient}
-----

public class HttpUploadClient{
...
	private static List<InterfaceHttpData> formpost(ClientBootstrap bootstrap, String host, int port, URI uriSimple, File file, HttpDataFactory factory, List<Entry<String, String>> headers) throws Exception{
	...
		... channel.writeSync();
	...
	}
...
}

public class Channel{
...
	public ChannelFuture writeSync(){
	...
		... write(bodyRequestEncoder).sync();
	...
	}
...
}


----------------------------------
47. OurMessageChain{ channel.getCloseFuture().sync(), degree= 2, category= LOW, containerMethod= formpost(), containerClass= HttpUploadClient}
-----

public class HttpUploadClient{
...
	private static List<InterfaceHttpData> formpost(ClientBootstrap bootstrap, String host, int port, URI uriSimple, File file, HttpDataFactory factory, List<Entry<String, String>> headers) throws Exception{
	...
		... channel.closeFutureSync();
	...
	}
...
}

public class Channel{
...
	public ChannelFuture closeFutureSync(){
	...
		... getCloseFuture().sync();
	...
	}
...
}


----------------------------------
48. OurMessageChain{ future.sync().getChannel(), degree= 2, category= LOW, containerMethod= formpostmultipart(), containerClass= HttpUploadClient}
-----

public class HttpUploadClient{
...
	private static void formpostmultipart(ClientBootstrap bootstrap, String host, int port, URI uriFile, HttpDataFactory factory, List<Entry<String, String>> headers, List<InterfaceHttpData> bodylist) throws Exception{
	...
		... future.syncChannel();
	...
	}
...
}

public class ChannelFuture{
...
	public Channel syncChannel(){
	...
		... sync().getChannel();
	...
	}
...
}


----------------------------------
49. OurMessageChain{ channel.write(bodyRequestEncoder).sync(), degree= 2, category= LOW, containerMethod= formpostmultipart(), containerClass= HttpUploadClient}
-----

public class HttpUploadClient{
...
	private static void formpostmultipart(ClientBootstrap bootstrap, String host, int port, URI uriFile, HttpDataFactory factory, List<Entry<String, String>> headers, List<InterfaceHttpData> bodylist) throws Exception{
	...
		... channel.writeSync();
	...
	}
...
}

public class Channel{
...
	public ChannelFuture writeSync(){
	...
		... write(bodyRequestEncoder).sync();
	...
	}
...
}


----------------------------------
50. OurMessageChain{ channel.getCloseFuture().sync(), degree= 2, category= LOW, containerMethod= formpostmultipart(), containerClass= HttpUploadClient}
-----

public class HttpUploadClient{
...
	private static void formpostmultipart(ClientBootstrap bootstrap, String host, int port, URI uriFile, HttpDataFactory factory, List<Entry<String, String>> headers, List<InterfaceHttpData> bodylist) throws Exception{
	...
		... channel.closeFutureSync();
	...
	}
...
}

public class Channel{
...
	public ChannelFuture closeFutureSync(){
	...
		... getCloseFuture().sync();
	...
	}
...
}


----------------------------------
51. OurMessageChain{ response.getStatus().getCode(), degree= 2, category= LOW, containerMethod= messageReceived(), containerClass= HttpUploadClientHandler}
-----

public class HttpUploadClientHandler{
...
	public void messageReceived(ChannelHandlerContext ctx, MessageEvent e){
	...
		... response.statusCode();
	...
	}
...
}

public class HttpResponse{
...
	public int statusCode(){
	...
		... getStatus().getCode();
	...
	}
...
}


----------------------------------
52. OurMessageChain{ handshaker.handshake(ctx.getChannel(), req).addListener(WebSocketServerHandshaker.HANDSHAKE_LISTENER), degree= 2, category= LOW, containerMethod= handleHttpRequest(), containerClass= AutobahnServerHandler}
-----

public class AutobahnServerHandler{
...
	private void handleHttpRequest(ChannelHandlerContext ctx, HttpRequest req){
	...
		... handshaker.handshakeAddListener();
	...
	}
...
}

public class WebSocketServerHandshaker{
...
	public void handshakeAddListener(){
	...
		... handshake(ctx.getChannel(), req).addListener();
	...
	}
...
}


----------------------------------
53. OurMessageChain{ future.sync().getChannel(), degree= 2, category= LOW, containerMethod= main(), containerClass= WebSocketClient}
-----

public class WebSocketClient{
...
	public static void main(String[] args) throws Exception{
	...
		... future.syncChannel();
	...
	}
...
}

public class ChannelFuture{
...
	public Channel syncChannel(){
	...
		... sync().getChannel();
	...
	}
...
}


----------------------------------
54. OurMessageChain{ handshaker.handshake(ch).sync(), degree= 2, category= LOW, containerMethod= main(), containerClass= WebSocketClient}
-----

public class WebSocketClient{
...
	public static void main(String[] args) throws Exception{
	...
		... handshaker.handshakeSync();
	...
	}
...
}

public class WebSocketClientHandshaker{
...
	public ChannelFuture handshakeSync(){
	...
		... handshake(ch).sync();
	...
	}
...
}


----------------------------------
55. OurMessageChain{ ch.getCloseFuture().sync(), degree= 2, category= LOW, containerMethod= main(), containerClass= WebSocketClient}
-----

public class WebSocketClient{
...
	public static void main(String[] args) throws Exception{
	...
		... ch.closeFutureSync();
	...
	}
...
}

public class Channel{
...
	public ChannelFuture closeFutureSync(){
	...
		... getCloseFuture().sync();
	...
	}
...
}


----------------------------------
56. OurMessageChain{ handshaker.handshake(ctx.getChannel(), req).addListener(WebSocketServerHandshaker.HANDSHAKE_LISTENER), degree= 2, category= LOW, containerMethod= handleHttpRequest(), containerClass= WebSocketServerHandler}
-----

public class WebSocketServerHandler{
...
	private void handleHttpRequest(ChannelHandlerContext ctx, HttpRequest req){
	...
		... handshaker.handshakeAddListener();
	...
	}
...
}

public class WebSocketServerHandshaker{
...
	public void handshakeAddListener(){
	...
		... handshake(ctx.getChannel(), req).addListener();
	...
	}
...
}


----------------------------------
57. OurMessageChain{ channelFuture.getChannel().write(line), degree= 2, category= LOW, containerMethod= main(), containerClass= LocalExample}
-----

public class LocalExample{
...
	public static void main(String[] args) throws Exception{
	...
		... channelFuture.channelWrite();
	...
	}
...
}

public class ChannelFuture{
...
	public ChannelFuture channelWrite(){
	...
		... getChannel().write();
	...
	}
...
}


----------------------------------
58. OurMessageChain{ channelFuture.getChannel().close(), degree= 2, category= LOW, containerMethod= main(), containerClass= LocalExample}
-----

public class LocalExample{
...
	public static void main(String[] args) throws Exception{
	...
		... channelFuture.channelClose();
	...
	}
...
}

public class ChannelFuture{
...
	public ChannelFuture channelClose(){
	...
		... getChannel().close();
	...
	}
...
}


----------------------------------
59. OurMessageChain{ connectFuture.sync().getChannel(), degree= 2, category= LOW, containerMethod= main(), containerClass= LocalTimeClient}
-----

public class LocalTimeClient{
...
	public static void main(String[] args) throws Exception{
	...
		... connectFuture.syncChannel();
	...
	}
...
}

public class ChannelFuture{
...
	public Channel syncChannel(){
	...
		... sync().getChannel();
	...
	}
...
}


----------------------------------
60. OurMessageChain{ channel.getPipeline().get(LocalTimeClientHandler.class), degree= 2, category= LOW, containerMethod= main(), containerClass= LocalTimeClient}
-----

public class LocalTimeClient{
...
	public static void main(String[] args) throws Exception{
	...
		... channel.pipeline();
	...
	}
...
}

public class Channel{
...
	public ChannelHandler pipeline(){
	...
		... getPipeline().get();
	...
	}
...
}


----------------------------------
61. OurMessageChain{ channel.close().sync(), degree= 2, category= LOW, containerMethod= main(), containerClass= LocalTimeClient}
-----

public class LocalTimeClient{
...
	public static void main(String[] args) throws Exception{
	...
		... channel.closeSync();
	...
	}
...
}

public class Channel{
...
	public ChannelFuture closeSync(){
	...
		... close().sync();
	...
	}
...
}


----------------------------------
62. OurMessageChain{ future.sync().getChannel(), degree= 2, category= LOW, containerMethod= main(), containerClass= SecureChatClient}
-----

public class SecureChatClient{
...
	public static void main(String[] args) throws Exception{
	...
		... future.syncChannel();
	...
	}
...
}

public class ChannelFuture{
...
	public Channel syncChannel(){
	...
		... sync().getChannel();
	...
	}
...
}


----------------------------------
63. OurMessageChain{ channel.getCloseFuture().sync(), degree= 2, category= LOW, containerMethod= main(), containerClass= SecureChatClient}
-----

public class SecureChatClient{
...
	public static void main(String[] args) throws Exception{
	...
		... channel.closeFutureSync();
	...
	}
...
}

public class Channel{
...
	public ChannelFuture closeFutureSync(){
	...
		... getCloseFuture().sync();
	...
	}
...
}


----------------------------------
64. OurMessageChain{ channel.close().sync(), degree= 2, category= LOW, containerMethod= main(), containerClass= SecureChatClient}
-----

public class SecureChatClient{
...
	public static void main(String[] args) throws Exception{
	...
		... channel.closeSync();
	...
	}
...
}

public class Channel{
...
	public ChannelFuture closeSync(){
	...
		... close().sync();
	...
	}
...
}


----------------------------------
65. OurMessageChain{ future.sync().getChannel(), degree= 2, category= LOW, containerMethod= main(), containerClass= TelnetClient}
-----

public class TelnetClient{
...
	public static void main(String[] args) throws Exception{
	...
		... future.syncChannel();
	...
	}
...
}

public class ChannelFuture{
...
	public Channel syncChannel(){
	...
		... sync().getChannel();
	...
	}
...
}


----------------------------------
66. OurMessageChain{ channel.getCloseFuture().sync(), degree= 2, category= LOW, containerMethod= main(), containerClass= TelnetClient}
-----

public class TelnetClient{
...
	public static void main(String[] args) throws Exception{
	...
		... channel.closeFutureSync();
	...
	}
...
}

public class Channel{
...
	public ChannelFuture closeFutureSync(){
	...
		... getCloseFuture().sync();
	...
	}
...
}


----------------------------------
67. OurMessageChain{ channel.close().sync(), degree= 2, category= LOW, containerMethod= main(), containerClass= TelnetClient}
-----

public class TelnetClient{
...
	public static void main(String[] args) throws Exception{
	...
		... channel.closeSync();
	...
	}
...
}

public class Channel{
...
	public ChannelFuture closeSync(){
	...
		... close().sync();
	...
	}
...
}


----------------------------------
68. OurMessageChain{ cookie.getPorts().isEmpty(), degree= 2, category= LOW, containerMethod= encodeServerSide(), containerClass= CookieEncoder}
-----

public class CookieEncoder{
...
	private String encodeServerSide(){
	...
		... cookie.portsIsEmpty();
	...
	}
...
}

public class Cookie{
...
	public void portsIsEmpty(){
	...
		... getPorts().isEmpty();
	...
	}
...
}


----------------------------------
69. OurMessageChain{ cookie.getPorts().isEmpty(), degree= 2, category= LOW, containerMethod= encodeClientSide(), containerClass= CookieEncoder}
-----

public class CookieEncoder{
...
	private String encodeClientSide(){
	...
		... cookie.portsIsEmpty();
	...
	}
...
}

public class Cookie{
...
	public void portsIsEmpty(){
	...
		... getPorts().isEmpty();
	...
	}
...
}


----------------------------------
70. OurMessageChain{ chunk.getContent().readableBytes(), degree= 2, category= LOW, containerMethod= messageReceived(), containerClass= HttpChunkAggregator}
-----

public class HttpChunkAggregator{
...
	public void messageReceived(ChannelHandlerContext ctx, MessageEvent e) throws Exception{
	...
		... chunk.contentReadableBytes();
	...
	}
...
}

public class HttpChunk{
...
	public int contentReadableBytes(){
	...
		... getContent().readableBytes();
	...
	}
...
}


----------------------------------
71. OurMessageChain{ currentMessage.headers().set(header.getKey(), header.getValue()), degree= 2, category= LOW, containerMethod= messageReceived(), containerClass= HttpChunkAggregator}
-----

public class HttpChunkAggregator{
...
	public void messageReceived(ChannelHandlerContext ctx, MessageEvent e) throws Exception{
	...
		... currentMessage.headersSet();
	...
	}
...
}

public class HttpMessage{
...
	public HttpHeaders headersSet(){
	...
		... headers().set();
	...
	}
...
}


----------------------------------
72. OurMessageChain{ currentMessage.headers().set(HttpHeaders.Names.CONTENT_LENGTH, String.valueOf(content.readableBytes())), degree= 2, category= LOW, containerMethod= messageReceived(), containerClass= HttpChunkAggregator}
-----

public class HttpChunkAggregator{
...
	public void messageReceived(ChannelHandlerContext ctx, MessageEvent e) throws Exception{
	...
		... currentMessage.headersSet();
	...
	}
...
}

public class HttpMessage{
...
	public HttpHeaders headersSet(){
	...
		... headers().set();
	...
	}
...
}


----------------------------------
73. OurMessageChain{ method.getName().charAt(0), degree= 2, category= LOW, containerMethod= isContentAlwaysEmpty(), containerClass= HttpClientCodec}
-----

public class HttpClientCodec{
...
	protected boolean isContentAlwaysEmpty(HttpMessage msg){
	...
		... method.nameCharAt();
	...
	}
...
}

public class HttpMethod{
...
	public void nameCharAt(){
	...
		... getName().charAt();
	...
	}
...
}


----------------------------------
74. OurMessageChain{ m.headers().get(HttpHeaders.Names.CONTENT_ENCODING), degree= 2, category= LOW, containerMethod= messageReceived(), containerClass= HttpContentDecoder}
-----

public class HttpContentDecoder{
...
	public void messageReceived(ChannelHandlerContext ctx, MessageEvent e) throws Exception{
	...
		... m.headers();
	...
	}
...
}

public class HttpMessage{
...
	public String headers(){
	...
		... headers().get();
	...
	}
...
}


----------------------------------
75. OurMessageChain{ m.getContent().readable(), degree= 2, category= LOW, containerMethod= messageReceived(), containerClass= HttpContentDecoder}
-----

public class HttpContentDecoder{
...
	public void messageReceived(ChannelHandlerContext ctx, MessageEvent e) throws Exception{
	...
		... m.contentReadable();
	...
	}
...
}

public class HttpMessage{
...
	public boolean contentReadable(){
	...
		... getContent().readable();
	...
	}
...
}


----------------------------------
76. OurMessageChain{ m.headers().set(HttpHeaders.Names.CONTENT_ENCODING, targetContentEncoding), degree= 2, category= LOW, containerMethod= messageReceived(), containerClass= HttpContentDecoder}
-----

public class HttpContentDecoder{
...
	public void messageReceived(ChannelHandlerContext ctx, MessageEvent e) throws Exception{
	...
		... m.headersSet();
	...
	}
...
}

public class HttpMessage{
...
	public HttpHeaders headersSet(){
	...
		... headers().set();
	...
	}
...
}


----------------------------------
77. OurMessageChain{ m.headers().remove(HttpHeaders.Names.CONTENT_ENCODING), degree= 2, category= LOW, containerMethod= messageReceived(), containerClass= HttpContentDecoder}
-----

public class HttpContentDecoder{
...
	public void messageReceived(ChannelHandlerContext ctx, MessageEvent e) throws Exception{
	...
		... m.headersRemove();
	...
	}
...
}

public class HttpMessage{
...
	public HttpHeaders headersRemove(){
	...
		... headers().remove();
	...
	}
...
}


----------------------------------
78. OurMessageChain{ m.headers().contains(HttpHeaders.Names.CONTENT_LENGTH), degree= 2, category= LOW, containerMethod= messageReceived(), containerClass= HttpContentDecoder}
-----

public class HttpContentDecoder{
...
	public void messageReceived(ChannelHandlerContext ctx, MessageEvent e) throws Exception{
	...
		... m.headersContains();
	...
	}
...
}

public class HttpMessage{
...
	public boolean headersContains(){
	...
		... headers().contains();
	...
	}
...
}


----------------------------------
79. OurMessageChain{ m.headers().set(HttpHeaders.Names.CONTENT_LENGTH, Integer.toString(content.readableBytes())), degree= 2, category= LOW, containerMethod= messageReceived(), containerClass= HttpContentDecoder}
-----

public class HttpContentDecoder{
...
	public void messageReceived(ChannelHandlerContext ctx, MessageEvent e) throws Exception{
	...
		... m.headersSet();
	...
	}
...
}

public class HttpMessage{
...
	public HttpHeaders headersSet(){
	...
		... headers().set();
	...
	}
...
}


----------------------------------
80. OurMessageChain{ m.headers().get(HttpHeaders.Names.ACCEPT_ENCODING), degree= 2, category= LOW, containerMethod= messageReceived(), containerClass= HttpContentEncoder}
-----

public class HttpContentEncoder{
...
	public void messageReceived(ChannelHandlerContext ctx, MessageEvent e) throws Exception{
	...
		... m.headers();
	...
	}
...
}

public class HttpMessage{
...
	public String headers(){
	...
		... headers().get();
	...
	}
...
}


----------------------------------
81. OurMessageChain{ m.headers().get(HttpHeaders.Names.CONTENT_ENCODING), degree= 2, category= LOW, containerMethod= writeRequested(), containerClass= HttpContentEncoder}
-----

public class HttpContentEncoder{
...
	public void writeRequested(ChannelHandlerContext ctx, MessageEvent e) throws Exception{
	...
		... m.headers();
	...
	}
...
}

public class HttpMessage{
...
	public String headers(){
	...
		... headers().get();
	...
	}
...
}


----------------------------------
82. OurMessageChain{ m.getContent().readable(), degree= 2, category= LOW, containerMethod= writeRequested(), containerClass= HttpContentEncoder}
-----

public class HttpContentEncoder{
...
	public void writeRequested(ChannelHandlerContext ctx, MessageEvent e) throws Exception{
	...
		... m.contentReadable();
	...
	}
...
}

public class HttpMessage{
...
	public boolean contentReadable(){
	...
		... getContent().readable();
	...
	}
...
}


----------------------------------
83. OurMessageChain{ m.headers().set(HttpHeaders.Names.CONTENT_ENCODING, getTargetContentEncoding(acceptEncoding)), degree= 2, category= LOW, containerMethod= writeRequested(), containerClass= HttpContentEncoder}
-----

public class HttpContentEncoder{
...
	public void writeRequested(ChannelHandlerContext ctx, MessageEvent e) throws Exception{
	...
		... m.headersSet();
	...
	}
...
}

public class HttpMessage{
...
	public HttpHeaders headersSet(){
	...
		... headers().set();
	...
	}
...
}


----------------------------------
84. OurMessageChain{ m.headers().contains(HttpHeaders.Names.CONTENT_LENGTH), degree= 2, category= LOW, containerMethod= writeRequested(), containerClass= HttpContentEncoder}
-----

public class HttpContentEncoder{
...
	public void writeRequested(ChannelHandlerContext ctx, MessageEvent e) throws Exception{
	...
		... m.headersContains();
	...
	}
...
}

public class HttpMessage{
...
	public boolean headersContains(){
	...
		... headers().contains();
	...
	}
...
}


----------------------------------
85. OurMessageChain{ m.headers().set(HttpHeaders.Names.CONTENT_LENGTH, Integer.toString(content.readableBytes())), degree= 2, category= LOW, containerMethod= writeRequested(), containerClass= HttpContentEncoder}
-----

public class HttpContentEncoder{
...
	public void writeRequested(ChannelHandlerContext ctx, MessageEvent e) throws Exception{
	...
		... m.headersSet();
	...
	}
...
}

public class HttpMessage{
...
	public HttpHeaders headersSet(){
	...
		... headers().set();
	...
	}
...
}


----------------------------------
86. OurMessageChain{ m.headers().remove(HttpHeaders.Names.CONTENT_LENGTH), degree= 2, category= LOW, containerMethod= writeRequested(), containerClass= HttpContentEncoder}
-----

public class HttpContentEncoder{
...
	public void writeRequested(ChannelHandlerContext ctx, MessageEvent e) throws Exception{
	...
		... m.headersRemove();
	...
	}
...
}

public class HttpMessage{
...
	public HttpHeaders headersRemove(){
	...
		... headers().remove();
	...
	}
...
}


----------------------------------
87. OurMessageChain{ res.getStatus().getCode(), degree= 2, category= LOW, containerMethod= getWebSocketContentLength(), containerClass= HttpHeaders}
-----

public class HttpHeaders{
...
	private static int getWebSocketContentLength(HttpMessage message){
	...
		... res.statusCode();
	...
	}
...
}

public class HttpResponse{
...
	public int statusCode(){
	...
		... getStatus().getCode();
	...
	}
...
}


----------------------------------
88. OurMessageChain{ message.headers().remove(HttpHeaders.Names.TRANSFER_ENCODING), degree= 2, category= LOW, containerMethod= decode(), containerClass= HttpMessageDecoder}
-----

public class HttpMessageDecoder{
...
	protected Object decode(ChannelHandlerContext ctx, Channel channel, ChannelBuffer buffer, State state) throws Exception{
	...
		... message.headersRemove();
	...
	}
...
}

public class HttpMessage{
...
	public HttpHeaders headersRemove(){
	...
		... headers().remove();
	...
	}
...
}


----------------------------------
89. OurMessageChain{ res.getStatus().getCode(), degree= 2, category= LOW, containerMethod= isContentAlwaysEmpty(), containerClass= HttpMessageDecoder}
-----

public class HttpMessageDecoder{
...
	protected boolean isContentAlwaysEmpty(HttpMessage msg){
	...
		... res.statusCode();
	...
	}
...
}

public class HttpResponse{
...
	public int statusCode(){
	...
		... getStatus().getCode();
	...
	}
...
}


----------------------------------
90. OurMessageChain{ res.getStatus().getCode(), degree= 2, category= LOW, containerMethod= resetState(), containerClass= HttpMessageDecoder}
-----

public class HttpMessageDecoder{
...
	private void resetState(){
	...
		... res.statusCode();
	...
	}
...
}

public class HttpResponse{
...
	public int statusCode(){
	...
		... getStatus().getCode();
	...
	}
...
}


----------------------------------
91. OurMessageChain{ message.headers().clear(), degree= 2, category= LOW, containerMethod= readHeaders(), containerClass= HttpMessageDecoder}
-----

public class HttpMessageDecoder{
...
	private State readHeaders(ChannelBuffer buffer) throws TooLongFrameException{
	...
		... message.headersClear();
	...
	}
...
}

public class HttpMessage{
...
	public HttpHeaders headersClear(){
	...
		... headers().clear();
	...
	}
...
}


----------------------------------
92. OurMessageChain{ message.headers().add(name, value), degree= 2, category= LOW, containerMethod= readHeaders(), containerClass= HttpMessageDecoder}
-----

public class HttpMessageDecoder{
...
	private State readHeaders(ChannelBuffer buffer) throws TooLongFrameException{
	...
		... message.headersAdd();
	...
	}
...
}

public class HttpMessage{
...
	public HttpHeaders headersAdd(){
	...
		... headers().add();
	...
	}
...
}


----------------------------------
93. OurMessageChain{ message.headers().add(name, value), degree= 2, category= LOW, containerMethod= readHeaders(), containerClass= HttpMessageDecoder}
-----

public class HttpMessageDecoder{
...
	private State readHeaders(ChannelBuffer buffer) throws TooLongFrameException{
	...
		... message.headersAdd();
	...
	}
...
}

public class HttpMessage{
...
	public HttpHeaders headersAdd(){
	...
		... headers().add();
	...
	}
...
}


----------------------------------
94. OurMessageChain{ trailer.trailingHeaders().add(name, header[1]), degree= 2, category= LOW, containerMethod= readTrailingHeaders(), containerClass= HttpMessageDecoder}
-----

public class HttpMessageDecoder{
...
	private HttpChunkTrailer readTrailingHeaders(ChannelBuffer buffer) throws TooLongFrameException{
	...
		... trailer.trailingHeadersAdd();
	...
	}
...
}

public class HttpChunkTrailer{
...
	public HttpHeaders trailingHeadersAdd(){
	...
		... trailingHeaders().add();
	...
	}
...
}


----------------------------------
95. OurMessageChain{ trailer.trailingHeaders().getAll(lastHeader), degree= 2, category= LOW, containerMethod= readTrailingHeaders(), containerClass= HttpMessageDecoder}
-----

public class HttpMessageDecoder{
...
	private HttpChunkTrailer readTrailingHeaders(ChannelBuffer buffer) throws TooLongFrameException{
	...
		... trailer.trailingHeadersAll();
	...
	}
...
}

public class HttpChunkTrailer{
...
	public List<String> trailingHeadersAll(){
	...
		... trailingHeaders().getAll();
	...
	}
...
}


----------------------------------
96. OurMessageChain{ m.headers().add(Names.TRANSFER_ENCODING, Values.CHUNKED), degree= 2, category= LOW, containerMethod= encode(), containerClass= HttpMessageEncoder}
-----

public class HttpMessageEncoder{
...
	protected Object encode(ChannelHandlerContext ctx, Channel channel, Object msg) throws Exception{
	...
		... m.headersAdd();
	...
	}
...
}

public class HttpMessage{
...
	public HttpHeaders headersAdd(){
	...
		... headers().add();
	...
	}
...
}


----------------------------------
97. OurMessageChain{ encoding.getValue().toLowerCase(), degree= 2, category= LOW, containerMethod= getFileUpload(), containerClass= HttpPostMultipartRequestDecoder}
-----

public class HttpPostMultipartRequestDecoder{
...
	private InterfaceHttpData getFileUpload(String delimiter) throws ErrorDataDecoderException{
	...
		... encoding.valueToLowerCase();
	...
	}
...
}

public class Attribute{
...
	public void valueToLowerCase(){
	...
		... getValue().toLowerCase();
	...
	}
...
}


----------------------------------
98. OurMessageChain{ fileUpload.getFilename().length(), degree= 2, category= LOW, containerMethod= addBodyHttpData(), containerClass= HttpPostRequestEncoder}
-----

public class HttpPostRequestEncoder{
...
	public void addBodyHttpData(InterfaceHttpData data) throws ErrorDataEncoderException{
	...
		... fileUpload.filenameLength();
	...
	}
...
}

public class FileUpload{
...
	public void filenameLength(){
	...
		... getFilename().length();
	...
	}
...
}


----------------------------------
99. OurMessageChain{ msg.getBinaryData().readableBytes(), degree= 2, category= LOW, containerMethod= decode(), containerClass= WebSocketFrameAggregator}
-----

public class WebSocketFrameAggregator{
...
	protected Object decode(ChannelHandlerContext ctx, Channel channel, Object message) throws Exception{
	...
		... msg.binaryDataReadableBytes();
	...
	}
...
}

public class WebSocketFrame{
...
	public int binaryDataReadableBytes(){
	...
		... getBinaryData().readableBytes();
	...
	}
...
}


----------------------------------
100. OurMessageChain{ p.getContext(HttpResponseEncoder.class).getName(), degree= 2, category= LOW, containerMethod= writeHandshakeResponse(), containerClass= WebSocketServerHandshaker}
-----

public class WebSocketServerHandshaker{
...
	protected ChannelFuture writeHandshakeResponse(Channel channel, HttpResponse res, ChannelHandler encoder, ChannelHandler decoder){
	...
		... p.contextName();
	...
	}
...
}

public class ChannelPipeline{
...
	public String contextName(){
	...
		... getContext(HttpResponseEncoder.class).getName();
	...
	}
...
}


----------------------------------
101. OurMessageChain{ p.get(HttpRequestDecoder.class).replace("wsdecoder", decoder), degree= 2, category= LOW, containerMethod= writeHandshakeResponse(), containerClass= WebSocketServerHandshaker}
-----

public class WebSocketServerHandshaker{
...
	protected ChannelFuture writeHandshakeResponse(Channel channel, HttpResponse res, ChannelHandler encoder, ChannelHandler decoder){
	...
		... p.replace();
	...
	}
...
}

public class ChannelPipeline{
...
	public void replace(){
	...
		... get(HttpRequestDecoder.class).replace();
	...
	}
...
}


----------------------------------
102. OurMessageChain{ output.getBuffer().writeBytes(LENGTH_PLACEHOLDER), degree= 2, category= LOW, containerMethod= encode(), containerClass= MarshallingEncoder}
-----

public class MarshallingEncoder{
...
	protected Object encode(ChannelHandlerContext ctx, Channel channel, Object msg) throws Exception{
	...
		... output.bufferWriteBytes();
	...
	}
...
}

public class ChannelBufferByteOutput{
...
	public void bufferWriteBytes(){
	...
		... getBuffer().writeBytes();
	...
	}
...
}


----------------------------------
103. OurMessageChain{ responseStatus.getReasonPhrase().equals(reasonPhrase), degree= 2, category= LOW, containerMethod= getStatus(), containerClass= SpdyHeaders}
-----

public class SpdyHeaders{
...
	public static HttpResponseStatus getStatus(int spdyVersion, SpdyHeadersFrame frame){
	...
		... responseStatus.reasonPhraseEquals();
	...
	}
...
}

public class HttpResponseStatus{
...
	public void reasonPhraseEquals(){
	...
		... getReasonPhrase().equals();
	...
	}
...
}


----------------------------------
104. OurMessageChain{ spdyDataFrame.getData().readableBytes(), degree= 2, category= LOW, containerMethod= decode(), containerClass= SpdyHttpDecoder}
-----

public class SpdyHttpDecoder{
...
	protected Object decode(ChannelHandlerContext ctx, Channel channel, Object msg) throws Exception{
	...
		... spdyDataFrame.dataReadableBytes();
	...
	}
...
}

public class SpdyDataFrame{
...
	public int dataReadableBytes(){
	...
		... getData().readableBytes();
	...
	}
...
}


----------------------------------
105. OurMessageChain{ httpMessage.headers().add(e.getKey(), e.getValue()), degree= 2, category= LOW, containerMethod= decode(), containerClass= SpdyHttpDecoder}
-----

public class SpdyHttpDecoder{
...
	protected Object decode(ChannelHandlerContext ctx, Channel channel, Object msg) throws Exception{
	...
		... httpMessage.headersAdd();
	...
	}
...
}

public class HttpMessage{
...
	public HttpHeaders headersAdd(){
	...
		... headers().add();
	...
	}
...
}


----------------------------------
106. OurMessageChain{ spdyHeadersFrame.headers().add(entry.getKey(), entry.getValue()), degree= 2, category= LOW, containerMethod= writeChunk(), containerClass= SpdyHttpEncoder}
-----

public class SpdyHttpEncoder{
...
	protected void writeChunk(ChannelHandlerContext ctx, ChannelFuture future, int streamId, HttpChunk chunk, SocketAddress remoteAddress){
	...
		... spdyHeadersFrame.headersAdd();
	...
	}
...
}

public class SpdyHeadersFrame{
...
	public SpdyHeaders headersAdd(){
	...
		... headers().add();
	...
	}
...
}


----------------------------------
107. OurMessageChain{ spdyDataFrame.getData().readableBytes(), degree= 2, category= LOW, containerMethod= messageReceived(), containerClass= SpdySessionHandler}
-----

public class SpdySessionHandler{
...
	public void messageReceived(ChannelHandlerContext ctx, MessageEvent e) throws Exception{
	...
		... spdyDataFrame.dataReadableBytes();
	...
	}
...
}

public class SpdyDataFrame{
...
	public int dataReadableBytes(){
	...
		... getData().readableBytes();
	...
	}
...
}


----------------------------------
108. OurMessageChain{ spdyDataFrame.getData().readableBytes(), degree= 2, category= LOW, containerMethod= messageReceived(), containerClass= SpdySessionHandler}
-----

public class SpdySessionHandler{
...
	public void messageReceived(ChannelHandlerContext ctx, MessageEvent e) throws Exception{
	...
		... spdyDataFrame.dataReadableBytes();
	...
	}
...
}

public class SpdyDataFrame{
...
	public int dataReadableBytes(){
	...
		... getData().readableBytes();
	...
	}
...
}


----------------------------------
109. OurMessageChain{ spdyDataFrame.getData().readableBytes(), degree= 2, category= LOW, containerMethod= handleDownstream(), containerClass= SpdySessionHandler}
-----

public class SpdySessionHandler{
...
	public void handleDownstream(ChannelHandlerContext ctx, ChannelEvent evt) throws Exception{
	...
		... spdyDataFrame.dataReadableBytes();
	...
	}
...
}

public class SpdyDataFrame{
...
	public int dataReadableBytes(){
	...
		... getData().readableBytes();
	...
	}
...
}


----------------------------------
110. OurMessageChain{ spdyDataFrame.getData().readableBytes(), degree= 2, category= LOW, containerMethod= updateSendWindowSize(), containerClass= SpdySessionHandler}
-----

public class SpdySessionHandler{
...
	private void updateSendWindowSize(ChannelHandlerContext ctx, int streamId, int deltaWindowSize){
	...
		... spdyDataFrame.dataReadableBytes();
	...
	}
...
}

public class SpdyDataFrame{
...
	public int dataReadableBytes(){
	...
		... getData().readableBytes();
	...
	}
...
}


----------------------------------
111. OurMessageChain{ event.getFuture().setFailure(cause), degree= 2, category= LOW, containerMethod= shutdownNow(), containerClass= MemoryAwareThreadPoolExecutor}
-----

public class MemoryAwareThreadPoolExecutor{
...
	public List<Runnable> shutdownNow(boolean notify){
	...
		... event.futureSetFailure();
	...
	}
...
}

public class ChannelEvent{
...
	public boolean futureSetFailure(){
	...
		... getFuture().setFailure();
	...
	}
...
}


----------------------------------
112. OurMessageChain{ eventTask.getEvent().getChannel(), degree= 2, category= LOW, containerMethod= increaseCounter(), containerClass= MemoryAwareThreadPoolExecutor}
-----

public class MemoryAwareThreadPoolExecutor{
...
	protected void increaseCounter(Runnable task){
	...
		... eventTask.eventChannel();
	...
	}
...
}

public class ChannelEventRunnable{
...
	public Channel eventChannel(){
	...
		... getEvent().getChannel();
	...
	}
...
}


----------------------------------
113. OurMessageChain{ eventTask.getEvent().getChannel(), degree= 2, category= LOW, containerMethod= decreaseCounter(), containerClass= MemoryAwareThreadPoolExecutor}
-----

public class MemoryAwareThreadPoolExecutor{
...
	protected void decreaseCounter(Runnable task){
	...
		... eventTask.eventChannel();
	...
	}
...
}

public class ChannelEventRunnable{
...
	public Channel eventChannel(){
	...
		... getEvent().getChannel();
	...
	}
...
}


----------------------------------
114. OurMessageChain{ cidr.toString().compareTo(o.cidr.toString()), degree= 2, category= LOW, containerMethod= compareTo(), containerClass= IpSubnet}
-----

public class IpSubnet{
...
	public int compareTo(IpSubnet o){
	...
		... cidr.toStringCompareTo();
	...
	}
...
}

public class CIDR{
...
	public void toStringCompareTo(){
	...
		... toString().compareTo();
	...
	}
...
}


----------------------------------
115. OurMessageChain{ ctx.getPipeline().execute(new Runnable() {

    public void run() {
        if (!pendingUnencryptedWritesLock.tryLock()) {
            return;
        }
        List<ChannelFuture> futures = null;
        try {
            for (; ; ) {
                PendingWrite pw = pendingUnencryptedWrites.poll();
                if (pw == null) {
                    break;
                }
                if (futures == null) {
                    futures = new ArrayList<ChannelFuture>();
                }
                futures.add(pw.future);
            }
            for (; ; ) {
                MessageEvent ev = pendingEncryptedWrites.poll();
                if (ev == null) {
                    break;
                }
                if (futures != null) {
                    futures = new ArrayList<ChannelFuture>();
                }
                futures.add(ev.getFuture());
            }
        } finally {
            pendingUnencryptedWritesLock.unlock();
        }
        if (futures != null) {
            final ClosedChannelException cause = new ClosedChannelException();
            final int size = futures.size();
            for (int i = 0; i < size; i++) {
                futures.get(i).setFailure(cause);
            }
            fireExceptionCaught(ctx, cause);
        }
    }
}), degree= 2, category= LOW, containerMethod= channelClosed(), containerClass= SslHandler}
-----

public class SslHandler{
...
	public void channelClosed(final ChannelHandlerContext ctx, ChannelStateEvent e) throws Exception{
	...
		... ctx.pipelineExecute();
	...
	}
...
}

public class ChannelHandlerContext{
...
	public ChannelFuture pipelineExecute(){
	...
		... getPipeline().execute();
	...
	}
...
}


----------------------------------
116. OurMessageChain{ ctx.getPipeline().isAttached(), degree= 2, category= LOW, containerMethod= beforeAdd(), containerClass= IdleStateHandler}
-----

public class IdleStateHandler{
...
	public void beforeAdd(ChannelHandlerContext ctx) throws Exception{
	...
		... ctx.pipelineIsAttached();
	...
	}
...
}

public class ChannelHandlerContext{
...
	public boolean pipelineIsAttached(){
	...
		... getPipeline().isAttached();
	...
	}
...
}


----------------------------------
117. OurMessageChain{ ctx.getPipeline().execute(new Runnable() {

    public void run() {
        try {
            channelIdle(ctx, state, lastActivityTimeMillis);
        } catch (Throwable t) {
            fireExceptionCaught(ctx, t);
        }
    }
}), degree= 2, category= LOW, containerMethod= fireChannelIdle(), containerClass= IdleStateHandler}
-----

public class IdleStateHandler{
...
	private void fireChannelIdle(final ChannelHandlerContext ctx, final IdleState state, final long lastActivityTimeMillis){
	...
		... ctx.pipelineExecute();
	...
	}
...
}

public class ChannelHandlerContext{
...
	public ChannelFuture pipelineExecute(){
	...
		... getPipeline().execute();
	...
	}
...
}


----------------------------------
118. OurMessageChain{ ctx.getChannel().isOpen(), degree= 2, category= LOW, containerMethod= run(), containerClass= IdleStateHandler}
-----

public class IdleStateHandler{
...
	public void run(Timeout timeout) throws Exception{
	...
		... ctx.channelIsOpen();
	...
	}
...
}

public class ChannelHandlerContext{
...
	public boolean channelIsOpen(){
	...
		... getChannel().isOpen();
	...
	}
...
}


----------------------------------
119. OurMessageChain{ ctx.getChannel().isOpen(), degree= 2, category= LOW, containerMethod= run(), containerClass= IdleStateHandler}
-----

public class IdleStateHandler{
...
	public void run(Timeout timeout) throws Exception{
	...
		... ctx.channelIsOpen();
	...
	}
...
}

public class ChannelHandlerContext{
...
	public boolean channelIsOpen(){
	...
		... getChannel().isOpen();
	...
	}
...
}


----------------------------------
120. OurMessageChain{ ctx.getChannel().isOpen(), degree= 2, category= LOW, containerMethod= run(), containerClass= IdleStateHandler}
-----

public class IdleStateHandler{
...
	public void run(Timeout timeout) throws Exception{
	...
		... ctx.channelIsOpen();
	...
	}
...
}

public class ChannelHandlerContext{
...
	public boolean channelIsOpen(){
	...
		... getChannel().isOpen();
	...
	}
...
}


----------------------------------
121. OurMessageChain{ ctx.getPipeline().isAttached(), degree= 2, category= LOW, containerMethod= beforeAdd(), containerClass= ReadTimeoutHandler}
-----

public class ReadTimeoutHandler{
...
	public void beforeAdd(ChannelHandlerContext ctx) throws Exception{
	...
		... ctx.pipelineIsAttached();
	...
	}
...
}

public class ChannelHandlerContext{
...
	public boolean pipelineIsAttached(){
	...
		... getPipeline().isAttached();
	...
	}
...
}


----------------------------------
122. OurMessageChain{ ctx.getChannel().isOpen(), degree= 2, category= LOW, containerMethod= run(), containerClass= ReadTimeoutHandler}
-----

public class ReadTimeoutHandler{
...
	public void run(Timeout timeout) throws Exception{
	...
		... ctx.channelIsOpen();
	...
	}
...
}

public class ChannelHandlerContext{
...
	public boolean channelIsOpen(){
	...
		... getChannel().isOpen();
	...
	}
...
}


----------------------------------
123. OurMessageChain{ ctx.getPipeline().execute(new Runnable() {

    public void run() {
        try {
            readTimedOut(ctx);
        } catch (Throwable t) {
            fireExceptionCaught(ctx, t);
        }
    }
}), degree= 2, category= LOW, containerMethod= fireReadTimedOut(), containerClass= ReadTimeoutHandler}
-----

public class ReadTimeoutHandler{
...
	private void fireReadTimedOut(final ChannelHandlerContext ctx) throws Exception{
	...
		... ctx.pipelineExecute();
	...
	}
...
}

public class ChannelHandlerContext{
...
	public ChannelFuture pipelineExecute(){
	...
		... getPipeline().execute();
	...
	}
...
}


----------------------------------
124. OurMessageChain{ ctx.getChannel().isOpen(), degree= 2, category= LOW, containerMethod= run(), containerClass= WriteTimeoutHandler}
-----

public class WriteTimeoutHandler{
...
	public void run(Timeout timeout) throws Exception{
	...
		... ctx.channelIsOpen();
	...
	}
...
}

public class ChannelHandlerContext{
...
	public boolean channelIsOpen(){
	...
		... getChannel().isOpen();
	...
	}
...
}


----------------------------------
125. OurMessageChain{ ctx.getPipeline().execute(new Runnable() {

    public void run() {
        try {
            writeTimedOut(ctx);
        } catch (Throwable t) {
            fireExceptionCaught(ctx, t);
        }
    }
}), degree= 2, category= LOW, containerMethod= fireWriteTimeOut(), containerClass= WriteTimeoutHandler}
-----

public class WriteTimeoutHandler{
...
	private void fireWriteTimeOut(final ChannelHandlerContext ctx){
	...
		... ctx.pipelineExecute();
	...
	}
...
}

public class ChannelHandlerContext{
...
	public ChannelFuture pipelineExecute(){
	...
		... getPipeline().execute();
	...
	}
...
}


----------------------------------
126. OurMessageChain{ ctx.getChannel().setReadable(true), degree= 2, category= LOW, containerMethod= releaseReadSuspended(), containerClass= AbstractTrafficShapingHandler}
-----

public class AbstractTrafficShapingHandler{
...
	void releaseReadSuspended(ChannelHandlerContext ctx){
	...
		... ctx.channelSetReadable();
	...
	}
...
}

public class ChannelHandlerContext{
...
	public ChannelFuture channelSetReadable(){
	...
		... getChannel().setReadable();
	...
	}
...
}


----------------------------------
127. OurMessageChain{ ctx.getChannel().setReadable(false), degree= 2, category= LOW, containerMethod= channelConnected(), containerClass= ChannelTrafficShapingHandler}
-----

public class ChannelTrafficShapingHandler{
...
	public void channelConnected(ChannelHandlerContext ctx, ChannelStateEvent e) throws Exception{
	...
		... ctx.channelSetReadable();
	...
	}
...
}

public class ChannelHandlerContext{
...
	public ChannelFuture channelSetReadable(){
	...
		... getChannel().setReadable();
	...
	}
...
}


----------------------------------
128. OurMessageChain{ ctx.getChannel().getId(), degree= 2, category= LOW, containerMethod= channelConnected(), containerClass= ChannelTrafficShapingHandler}
-----

public class ChannelTrafficShapingHandler{
...
	public void channelConnected(ChannelHandlerContext ctx, ChannelStateEvent e) throws Exception{
	...
		... ctx.channelId();
	...
	}
...
}

public class ChannelHandlerContext{
...
	public Integer channelId(){
	...
		... getChannel().getId();
	...
	}
...
}


----------------------------------
129. OurMessageChain{ ctx.getChannel().setReadable(true), degree= 2, category= LOW, containerMethod= channelConnected(), containerClass= ChannelTrafficShapingHandler}
-----

public class ChannelTrafficShapingHandler{
...
	public void channelConnected(ChannelHandlerContext ctx, ChannelStateEvent e) throws Exception{
	...
		... ctx.channelSetReadable();
	...
	}
...
}

public class ChannelHandlerContext{
...
	public ChannelFuture channelSetReadable(){
	...
		... getChannel().setReadable();
	...
	}
...
}


----------------------------------
130. OurMessageChain{ ctx.getChannel().isConnected(), degree= 2, category= LOW, containerMethod= releaseExternalResources(), containerClass= ChannelTrafficShapingHandler}
-----

public class ChannelTrafficShapingHandler{
...
	public void releaseExternalResources(){
	...
		... ctx.channelIsConnected();
	...
	}
...
}

public class ChannelHandlerContext{
...
	public boolean channelIsConnected(){
	...
		... getChannel().isConnected();
	...
	}
...
}


----------------------------------
131. OurMessageChain{ ctx.getChannel().hashCode(), degree= 2, category= LOW, containerMethod= getOrSetPerChannel(), containerClass= GlobalTrafficShapingHandler}
-----

public class GlobalTrafficShapingHandler{
...
	private synchronized PerChannel getOrSetPerChannel(ChannelHandlerContext ctx){
	...
		... ctx.channelHashCode();
	...
	}
...
}

public class ChannelHandlerContext{
...
	public void channelHashCode(){
	...
		... getChannel().hashCode();
	...
	}
...
}


----------------------------------
132. OurMessageChain{ ctx.getChannel().hashCode(), degree= 2, category= LOW, containerMethod= checkWaitReadTime(), containerClass= GlobalTrafficShapingHandler}
-----

public class GlobalTrafficShapingHandler{
...
	long checkWaitReadTime(final ChannelHandlerContext ctx, long wait, final long now){
	...
		... ctx.channelHashCode();
	...
	}
...
}

public class ChannelHandlerContext{
...
	public void channelHashCode(){
	...
		... getChannel().hashCode();
	...
	}
...
}


----------------------------------
133. OurMessageChain{ ctx.getChannel().hashCode(), degree= 2, category= LOW, containerMethod= informReadOperation(), containerClass= GlobalTrafficShapingHandler}
-----

public class GlobalTrafficShapingHandler{
...
	void informReadOperation(final ChannelHandlerContext ctx, final long now){
	...
		... ctx.channelHashCode();
	...
	}
...
}

public class ChannelHandlerContext{
...
	public void channelHashCode(){
	...
		... getChannel().hashCode();
	...
	}
...
}


----------------------------------
134. OurMessageChain{ ctx.getChannel().isConnected(), degree= 2, category= LOW, containerMethod= submitWrite(), containerClass= GlobalTrafficShapingHandler}
-----

public class GlobalTrafficShapingHandler{
...
	void submitWrite(final ChannelHandlerContext ctx, final MessageEvent evt, final long size, final long writedelay, final long now) throws Exception{
	...
		... ctx.channelIsConnected();
	...
	}
...
}

public class ChannelHandlerContext{
...
	public boolean channelIsConnected(){
	...
		... getChannel().isConnected();
	...
	}
...
}


----------------------------------
135. OurMessageChain{ ctx.getChannel().isConnected(), degree= 2, category= LOW, containerMethod= submitWrite(), containerClass= GlobalTrafficShapingHandler}
-----

public class GlobalTrafficShapingHandler{
...
	void submitWrite(final ChannelHandlerContext ctx, final MessageEvent evt, final long size, final long writedelay, final long now) throws Exception{
	...
		... ctx.channelIsConnected();
	...
	}
...
}

public class ChannelHandlerContext{
...
	public boolean channelIsConnected(){
	...
		... getChannel().isConnected();
	...
	}
...
}


----------------------------------
136. OurMessageChain{ ctx.getChannel().hashCode(), degree= 2, category= LOW, containerMethod= channelClosed(), containerClass= GlobalTrafficShapingHandler}
-----

public class GlobalTrafficShapingHandler{
...
	public void channelClosed(ChannelHandlerContext ctx, ChannelStateEvent e) throws Exception{
	...
		... ctx.channelHashCode();
	...
	}
...
}

public class ChannelHandlerContext{
...
	public void channelHashCode(){
	...
		... getChannel().hashCode();
	...
	}
...
}

